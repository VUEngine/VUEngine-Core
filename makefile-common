include $(ENGINE_HOME)/makefile-compiler

# Number of jobs to run
MAKE_JOBS = 4

# Default build type. Available types: release, beta, tools, debug, preprocessor
TYPE = release

# Alllow override of build type and number of jobs in config.make file
-include $(GAME_CONFIG_MAKE_FILE)
-include $(PLUGIN_CONFIG_MAKE_FILE)

# Clean plugin name by stripping out everything up to (and including) the last slash
BASENAME = $(shell echo $(NAME) | sed -e "s@.*/@@")

# Default clean type
CLEAN_TYPE = all

# output dir
ifeq ($(MY_HOME), $(GAME_HOME))
BUILD_DIR = build
else
BUILD_DIR = $(GAME_HOME)/build
endif

# Where to store object and dependency files.
WORKING_FOLDER = $(BUILD_DIR)/$(TYPE)$(WORKING_FOLDER_SUFFIX)

# Linked engine's home
PLUGINS_PATH = $(BUILD_DIR)/

# Plugin makefile
PLUGIN_MAKEFILE=$(ENGINE_HOME)/makefile

# Which directories will contain source files
SOURCES_DIRS = $(shell find $(MY_HOME)/source $(MY_HOME)/assets -type d -print)
SOURCES_DIRS_CLEAN = $(shell echo $(SOURCES_DIRS) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Makes a list of the source (.c) files.
C_SOURCES = $(foreach DIR,$(SOURCES_DIRS),$(wildcard $(DIR)/*.c))

# Makes a list of the source (.s) files.
ASSEMBLY_SOURCE = $(foreach DIR,$(SOURCES_DIRS),$(wildcard $(DIR)/*.s))

# Makes a list of the object files that will have to be created.
C_OBJECTS_TEMP = $(addprefix $(WORKING_FOLDER)/objects/$(NAME)/, $(C_SOURCES:.c=.o))
C_OBJECTS = $(shell echo $(C_OBJECTS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Makes a list of the object files that will have to be created.
ASSEMBLY_OBJECTS_TEMP = $(addprefix $(WORKING_FOLDER)/objects/$(NAME)/, $(ASSEMBLY_SOURCE:.s=.o))
ASSEMBLY_OBJECTS = $(shell echo $(ASSEMBLY_OBJECTS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

FOLDER_TO_CLEAN=$(MY_HOME)/build
ifneq ($(CLEAN_TYPE), all)
FOLDER_TO_CLEAN=$(MY_HOME)/build/$(CLEAN_TYPE)*
endif

# Obligatory headers
CONFIG_FILE = 			$(shell if [ -f $(MY_HOME)/source/config.h ]; then echo $(MY_HOME)/source/config.h; fi;)
ESSENTIAL_HEADERS = 	$(shell if [ ! -z $(CONFIG_FILE) ]; then echo -include $(CONFIG_FILE); fi;) 																				\
						-include $(ENGINE_HOME)/source/libvuengine.h 															\
						$(foreach PLUGIN, $(PLUGINS), $(shell if [ -f $(VBDE)libs/$(PLUGIN)/source/config.h ]; then 			\
							echo -include $(VBDE)libs/$(PLUGIN)/source/config.h; fi; ))											\
						$(shell if [ -f $(MY_HOME)/source/config.h ]; then echo -include $(MY_HOME)/source/config.h; fi;)		\

# File that holds the classes hierarchy
CLASSES_HIERARCHY_FILE = $(WORKING_FOLDER)/classes/hierarchies/$(NAME)/classesHierarchy.txt

# Class setup file
SETUP_CLASSES = $(BASENAME)SetupClasses
SETUP_CLASSES_SOURCE = $(WORKING_FOLDER)/objects/$(NAME)/$(SETUP_CLASSES)
SETUP_CLASSES_OBJECT = $(WORKING_FOLDER)/objects/$(NAME)/$(SETUP_CLASSES)
FINAL_SETUP_CLASSES = setupClasses
FINAL_SETUP_CLASSES_SOURCE = $(WORKING_FOLDER)/objects/setupClasses
FINAL_SETUP_CLASSES_OBJECT = $(WORKING_FOLDER)/objects/$(FINAL_SETUP_CLASSES)

preprocessClasses: dirs preprocessPlugins printClassPreprocessingInfo preprocessHeaderFiles
	@touch $(CLASSES_HIERARCHY_FILE)
	@$(eval PREPROCESSING_CLASSES_END_TIME=$(shell date +%s))
	@echo "Total time:" $$(( ($(PREPROCESSING_CLASSES_END_TIME) - $(PREPROCESSING_CLASSES_START_TIME)) / 60 ))" min. "$$(( ($(PREPROCESSING_CLASSES_END_TIME) - $(PREPROCESSING_CLASSES_START_TIME)) % 60 ))" sec."

# Empty rule to prevent problems when a header is deleted.
%.h: ;

printClassPreprocessingInfo:
	@echo
	@echo "********************************************* Preprocessing $(BASENAME)"
	@$(eval PREPROCESSING_CLASSES_START_TIME=$(shell date +%s))

preprocessPlugins:
	@-$(foreach PLUGIN, $(PLUGINS),							 																						\
		$(eval PLUGIN_CLASSES_HIERARCHY_FILE=$(WORKING_FOLDER)/classes/hierarchies/$(PLUGIN)/classesHierarchy.txt)									\
		if [ -f $(PLUGIN_CLASSES_HIERARCHY_FILE) ] && [ ! -f $(CLASSES_HIERARCHY_FILE) ]; then continue; fi; 										\
		$(eval MY_CLASSES_HIERARCHY_FILE_IS_NEWER=$(shell find $(CLASSES_HIERARCHY_FILE) -prune -newer $(PLUGIN_CLASSES_HIERARCHY_FILE) 2>&1))		\
		if [ ! -f $(PLUGIN_CLASSES_HIERARCHY_FILE) ] || [ -f $(CLASSES_HIERARCHY_FILE) -a ! -z "$(MY_CLASSES_HIERARCHY_FILE_IS_NEWER)" ]; then 		\
			$(eval CUSTOM_PLUGIN_MAKEFILE=$(VBDE)libs/$(PLUGIN)/makefile)																			\
			$(MAKE) --no-print-directory preprocessClasses																							\
				-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
				-e GAME_HOME=$(GAME_HOME)																											\
				-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
				-e NAME=$(PLUGIN)																													\
				-e MAKE_JOBS=$(MAKE_JOBS);																											\
		fi;																																			\
	)

preprocessHeaderFiles:
	@$(MAKE) --no-print-directory preprocess																										\
		-j $(MAKE_JOBS)																																		\
		-f $(ENGINE_HOME)/makefile-preprocess																										\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e NAME=$(NAME) 																															\
		-e BASENAME=$(BASENAME) 																													\
		-e MY_HOME=$(MY_HOME)																														\
		-e CLASSES_HIERARCHY_FILE=$(CLASSES_HIERARCHY_FILE) 																						\
		-e WORKING_FOLDER=$(WORKING_FOLDER) 																										\
		-e PLUGINS="$(PLUGINS)"														

compile:
	@$(MAKE) --no-print-directory compile																											\
		-j $(MAKE_JOBS)																																		\
		-f $(ENGINE_HOME)/makefile-compile																											\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e NAME=$(NAME) 																															\
		-e MY_HOME=$(MY_HOME)																														\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																							\
		-e CLASSES_HIERARCHY_FILE=$(CLASSES_HIERARCHY_FILE) 																						\
		-e WORKING_FOLDER=$(WORKING_FOLDER) 																										\
		-e ALL_TARGET_PREREQUISITES="$(ALL_TARGET_PREREQUISITES)"																					\
		-e PLUGINS="$(PLUGINS)"																														\
		-e ESSENTIAL_HEADERS="$(ESSENTIAL_HEADERS)"																									\
		-e GAME_NAME=$(GAME_NAME)																													\

plugins: deleteLibraries
	@-$(foreach PLUGIN, $(PLUGINS),	 																												\
		$(eval CUSTOM_PLUGIN_MAKEFILE=$(VBDE)libs/$(PLUGIN)/makefile)																				\
		$(eval PLUGIN_FILE=$(GAME_HOME)/build/lib$(shell echo $(PLUGIN) | sed -e "s@.*/@@"))														\
		if [ ! -f $(PLUGIN_FILE).a ]; then 																											\
			$(MAKE) --no-print-directory	 																										\
				$(PLUGIN_FILE).a 																													\
				-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
				-e CONFIG_FILE=$(CONFIG_FILE) 																										\
				-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
				-e GAME_HOME=$(GAME_HOME)																											\
				-e MAKE_JOBS=$(MAKE_JOBS)																											\
				-e NAME=$(PLUGIN)																													\
				-e GAME_NAME=$(GAME_NAME);																											\
		fi;																																			\
	)																																				\

deleteLibraries:

# Cleans up the objects, .d files and executables.
clean:
	@echo Cleaning $(CLEAN_TYPE)
	@rm -Rf $(FOLDER_TO_CLEAN)
	@echo "Cleaning done."

# Create necessary directories
DIRS_EXIST=$(shell [ -e $(WORKING_FOLDER)/objects/$(NAME) ] && echo 1 || echo 0 )

createPluginDirs:
ifeq ($(DIRS_EXIST), 0)
	@-$(foreach PLUGIN, $(PLUGINS), 		 																									\
		$(eval CUSTOM_PLUGIN_MAKEFILE=$(VBDE)libs/$(PLUGIN)/makefile)																			\
		$(eval PLUGIN_FILE=$(BUILD_DIR)/lib$(shell echo $(PLUGIN) | sed -e "s@.*/@@").a )														\
		$(MAKE) --no-print-directory dirs																										\
			-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
			-e GAME_HOME=$(GAME_HOME)																											\
			-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
			-e NAME=$(PLUGIN);																													\
	)
endif

printDirsInfo: phony
ifeq ($(DIRS_EXIST), 0)
#	@$(eval CHECKING_DIRS_START_TIME=$(shell date +%s))
#	@echo "********************************************* Checking working folders for $(BASENAME)"
	@echo -n Creating working dirs for $(BASENAME)...
endif

dirs: createPluginDirs printDirsInfo
ifeq ($(DIRS_EXIST), 0)
	@mkdir -p $(WORKING_FOLDER)/classes/dictionaries
	@mkdir -p $(WORKING_FOLDER)/classes/dependencies/$(NAME)
	@mkdir -p $(WORKING_FOLDER)/classes/hierarchies/$(NAME)
	@-$(foreach DIR,$(SOURCES_DIRS_CLEAN), mkdir -p $(WORKING_FOLDER)/objects/$(NAME)/$(DIR); )
	@echo " done"
#	@$(eval CHECKING_DIRS_END_TIME=$(shell date +%s))
#	@echo "Total time:" $$(( ($(CHECKING_DIRS_END_TIME) - $(CHECKING_DIRS_START_TIME)) / 60 ))" min. "$$(( ($(CHECKING_DIRS_END_TIME) - $(CHECKING_DIRS_START_TIME)) % 60 ))" sec."
endif

phony:
	@echo > /dev/null
