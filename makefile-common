include $(ENGINE_HOME)/makefile-compiler

# Number of jobs to run
MAKE_JOBS = 4

# Default build type. Available types: release, beta, tools, debug, preprocessor
TYPE = release

# Overrides file
CONFIG_MAKE_FILE = $(shell if [ -f $(MY_HOME)/config.make ]; then echo $(MY_HOME)/config.make; fi;)

# Override plugins when not game
ifeq ($(NAME), $(GAME_NAME))
	GAME_CONFIG_MAKE_FILE = $(CONFIG_MAKE_FILE)
	-include $(GAME_CONFIG_MAKE_FILE)
else
	-include $(GAME_CONFIG_MAKE_FILE)
	PLUGINS =
	-include $(CONFIG_MAKE_FILE)
endif

CREATE_ENGINE_DIRS =
PREPROCESS_ENGINE =
BUILD_ENGINE =

# All, except the core, must include the core as a build target
ifneq ($(NAME), $(ENGINE_NAME))
	override CREATE_ENGINE_DIRS := createEngineDirs
	override PREPROCESS_ENGINE := preprocessEngine
	override BUILD_ENGINE := engine
else
	override PLUGINS =
endif

# Clean plugin name by stripping out everything up to (and including) the last slash
BASENAME = $(shell echo $(NAME) | sed -e "s@.*/@@")

# Default clean type
CLEAN_TYPE = all

# output dir
ifeq ($(MY_HOME), $(GAME_HOME))
BUILD_DIR = build
else
BUILD_DIR = $(GAME_HOME)/build
endif

# Where to store object and dependency files.
WORKING_FOLDER = $(BUILD_DIR)/$(TYPE)$(WORKING_FOLDER_SUFFIX)

# Linked engine's home
PLUGINS_PATH = $(BUILD_DIR)/

# Plugin makefile
PLUGIN_MAKEFILE=$(ENGINE_HOME)/makefile

# Which directories will contain source files
ASSETS_DIRS = $(shell find $(MY_HOME)/assets -type d -print)

SOURCES_DIRS_CLEAN = $(shell echo $(SOURCES_DIRS) | sed -e 's@'"$(MY_HOME)"/'@@g')
ASSETS_DIRS_CLEAN = $(shell echo $(ASSETS_DIRS) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Makes a list of the assets (.mid, etc) files.
BINARY_ASSETS = $(foreach DIR,$(ASSETS_DIRS),$(wildcard $(DIR)/*.mid))

# Makes a list of the binary files that will have to be created.
BINARY_ASSETS_TEMP = $(addprefix $(WORKING_FOLDER)/objects/$(NAME)/, $(BINARY_ASSETS:.mid=.bin))
BINARY_ASSETS := $(shell echo $(BINARY_ASSETS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Makes a list of the special assets (.c) files.
ASSETS_SOURCES = $(foreach DIR,$(ASSETS_DIRS),$(wildcard $(DIR)/*.c))

# Makes a list of the binary files that will have to be created.
ASSETS_OBJECTS_TEMP = $(addprefix $(WORKING_FOLDER)/../assets/$(NAME)/, $(ASSETS_SOURCES:.c=.o))
ASSETS_OBJECTS = $(shell echo $(ASSETS_OBJECTS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Which directories contain source files
SOURCES_DIRS = $(shell find $(MY_HOME)/source -type d -print)

# Makes a list of the source (.c) files.
C_SOURCES = $(foreach DIR,$(SOURCES_DIRS),$(wildcard $(DIR)/*.c))

# Makes a list of the source (.s) files.
ASSEMBLY_SOURCE = $(foreach DIR,$(SOURCES_DIRS),$(wildcard $(DIR)/*.s))

# Makes a list of the object files that will have to be created.
C_OBJECTS_TEMP = $(addprefix $(WORKING_FOLDER)/objects/$(NAME)/, $(C_SOURCES:.c=.o))
C_OBJECTS = $(shell echo $(C_OBJECTS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

# Override make's default call to GCC
$(WORKING_FOLDER)/objects/$(NAME)/%.o:
	@echo > /dev/null

# Makes a list of the object files that will have to be created.
ASSEMBLY_OBJECTS_TEMP = $(addprefix $(WORKING_FOLDER)/objects/$(NAME)/, $(ASSEMBLY_SOURCE:.s=.o))
ASSEMBLY_OBJECTS = $(shell echo $(ASSEMBLY_OBJECTS_TEMP) | sed -e 's@'"$(MY_HOME)"/'@@g')

FOLDER_TO_CLEAN=$(MY_HOME)/build
ifneq ($(CLEAN_TYPE), all)
	FOLDER_TO_CLEAN=$(MY_HOME)/build/$(CLEAN_TYPE)*
endif

# Configuration files
CONFIG_FILE = 			$(shell if [ -f $(MY_HOME)/source/config.h ]; then echo $(MY_HOME)/source/config.h; fi;)
DEBUG_CONFIG_FILE = 	$(shell if [ -f $(MY_HOME)/source/debugConfig.h ]; then echo $(MY_HOME)/source/debugConfig.h; fi;)

# File that holds the classes hierarchy
CLASSES_HIERARCHY_FILE = $(WORKING_FOLDER)/classes/hierarchies/$(NAME)/classesHierarchy.txt

# Class setup file
SETUP_CLASSES = $(BASENAME)SetupClasses
SETUP_CLASSES_SOURCE = $(WORKING_FOLDER)/objects/$(NAME)/$(SETUP_CLASSES)
SETUP_CLASSES_OBJECT = $(WORKING_FOLDER)/objects/$(NAME)/$(SETUP_CLASSES)
FINAL_SETUP_CLASSES = setupClasses
FINAL_SETUP_CLASSES_SOURCE = $(WORKING_FOLDER)/objects/setupClasses
FINAL_SETUP_CLASSES_OBJECT = $(WORKING_FOLDER)/objects/$(FINAL_SETUP_CLASSES)

preprocessClasses: dirs $(PREPROCESS_ENGINE) preprocessPlugins printClassPreprocessingInfo preprocessHeaderFiles
	@touch $(CLASSES_HIERARCHY_FILE)
#	@$(eval PREPROCESSING_CLASSES_END_TIME=$(shell date +%s))
#	@echo "Total time:" $$(( ($(PREPROCESSING_CLASSES_END_TIME) - $(PREPROCESSING_CLASSES_START_TIME)) / 60 ))" min. "$$(( ($(PREPROCESSING_CLASSES_END_TIME) - $(PREPROCESSING_CLASSES_START_TIME)) % 60 ))" sec."

# Empty rule to prevent problems when a header is deleted.
%.h: ;

printClassPreprocessingInfo:
	@echo
	@$(shell echo $(NAME) >> \$(WORKING_FOLDER)/traces/preprocessedComponents.txt)
	@$(shell sort -u \$(WORKING_FOLDER)/traces/preprocessedComponents.txt > $(WORKING_FOLDER)/preprocessedComponents.txt.tmp)
	@$(eval PREPROCESSED_COMPONENTS=$(shell wc -l < \$(WORKING_FOLDER)/traces/preprocessedComponents.txt))
	@echo "Preprocessing $(BASENAME)"
#	@echo "($(PREPROCESSED_COMPONENTS)/$(COMPONENTS)) Preprocessing $(BASENAME)"
#	@$(eval PREPROCESSING_CLASSES_START_TIME=$(shell date +%s))

ENGINE_CLASSES_HIERARCHY_FILE = $(WORKING_FOLDER)/classes/hierarchies/$(ENGINE_NAME)/classesHierarchy.txt
ENGINE_CLASSES_HIERARCHY_FILE_EXISTS = $(shell [ -e $(ENGINE_CLASSES_HIERARCHY_FILE) ] && echo 1 || echo 0 )
CLASSES_HIERARCHY_FILE_EXISTS = $(shell [ -e $(CLASSES_HIERARCHY_FILE) ] && echo 1 || echo 0 )

# A very ugly hack
ifeq ($(ENGINE_CLASSES_HIERARCHY_FILE_EXISTS), 0)
preprocessEngine:
	@$(MAKE) --no-print-directory preprocessClasses																									\
			-f $(ENGINE_HOME)/makefile																												\
			-e GAME_HOME=$(GAME_HOME)																												\
			-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																						\
			-e NAME=$(ENGINE_NAME)																													\
			-e MAKE_JOBS=$(MAKE_JOBS)																												\
			-e COMPONENTS=$(COMPONENTS)
else
ifeq ($(CLASSES_HIERARCHY_FILE_EXISTS), 1)
MY_CLASSES_HIERARCHY_FILE_IS_NEWER = $(shell find $(CLASSES_HIERARCHY_FILE) -prune -newer $(ENGINE_CLASSES_HIERARCHY_FILE) 2>&1)
MUST_PREPROCESS_ENGINE = $(shell [ -f $(CLASSES_HIERARCHY_FILE) -a ! -z "$(MY_CLASSES_HIERARCHY_FILE_IS_NEWER)" ] && echo 1 || echo 0 )
ifeq ($(MUST_PREPROCESS_ENGINE), 1)
preprocessEngine:
	@$(MAKE) --no-print-directory preprocessClasses																									\
		-f $(ENGINE_HOME)/makefile																													\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																							\
		-e NAME=$(ENGINE_NAME)																														\
		-e MAKE_JOBS=$(MAKE_JOBS)																													\
		-e PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR=$(PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR)														\
		-e COMPONENTS=$(COMPONENTS)
else
preprocessEngine:
endif
else
preprocessEngine:
endif
endif

computeComponentsToBuild:
	@if ! grep -q $(BASENAME) \$(WORKING_FOLDER)/traces/components.txt; then 																		\
		echo $(BASENAME) >> \$(WORKING_FOLDER)/traces/components.txt;																				\
		$(foreach PLUGIN, $(PLUGINS),							 																					\
			$(eval CUSTOM_PLUGIN_MAKEFILE=$(PLUGINS_FOLDER)/$(PLUGIN)/makefile)																		\
			$(MAKE) --no-print-directory computeComponentsToBuild																					\
				-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
				-e GAME_HOME=$(GAME_HOME)																											\
				-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
				-e NAME=$(PLUGIN)																													\
				-e MAKE_JOBS=$(MAKE_JOBS);																											\
		)																																			\
	fi;

preprocessPlugins:
	@-$(foreach PLUGIN, $(PLUGINS),							 																						\
		if ! grep -q $(PLUGIN) \$(WORKING_FOLDER)/traces/preprocessedComponents.txt; then 															\
			$(eval CUSTOM_PLUGIN_MAKEFILE=$(PLUGINS_FOLDER)/$(PLUGIN)/makefile)																		\
			$(MAKE) --no-print-directory preprocessClasses																							\
				-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
				-e GAME_HOME=$(GAME_HOME)																											\
				-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
				-e NAME=$(PLUGIN)																													\
				-e MAKE_JOBS=$(MAKE_JOBS)																											\
				-e PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR=$(PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR)												\
				-e COMPONENTS=$(COMPONENTS);																										\
		fi;																																			\
	)

preprocessHeaderFiles:
	@$(MAKE) --no-print-directory preprocess																										\
		-j $(MAKE_JOBS)																																\
		-f $(ENGINE_HOME)/makefile-preprocess																										\
		-e TYPE=$(TYPE)																																\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e NAME=$(NAME) 																															\
		-e BASENAME=$(BASENAME) 																													\
		-e MY_HOME=$(MY_HOME)																														\
		-e CLASSES_HIERARCHY_FILE=$(CLASSES_HIERARCHY_FILE) 																						\
		-e WORKING_FOLDER=$(WORKING_FOLDER) 																										\
		-e PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR=$(PREPROCESSING_WAIT_FOR_LOCK_DELAY_FACTOR)														\
		-e PLUGINS="$(PLUGINS)"

compile:
	@$(MAKE) --no-print-directory compile																											\
		-j $(MAKE_JOBS)																																\
		-f $(ENGINE_HOME)/makefile-compile																											\
		-e TYPE=$(TYPE)																																\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e NAME=$(NAME) 																															\
		-e MY_HOME=$(MY_HOME)																														\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																							\
		-e CLASSES_HIERARCHY_FILE=$(CLASSES_HIERARCHY_FILE) 																						\
		-e WORKING_FOLDER=$(WORKING_FOLDER) 																										\
		-e PLUGINS="$(PLUGINS)"																														\
		-e CONFIG_FILE=$(CONFIG_FILE) 																												\
		-e DEBUG_CONFIG_FILE=$(DEBUG_CONFIG_FILE) 																									\
		-e GAME_NAME=$(GAME_NAME)																													\
		-e COMPONENTS=$(COMPONENTS)

engine: deleteLibraries
	@$(MAKE) --no-print-directory	 																												\
		$(GAME_HOME)/build/lib$(ENGINE_NAME).a																										\
		-f $(ENGINE_HOME)/makefile																													\
		-e CONFIG_FILE=$(CONFIG_FILE) 																												\
		-e DEBUG_CONFIG_FILE=$(DEBUG_CONFIG_FILE) 																									\
		-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																							\
		-e GAME_HOME=$(GAME_HOME)																													\
		-e MAKE_JOBS=$(MAKE_JOBS)																													\
		-e NAME=$(ENGINE_NAME)																														\
		-e GAME_NAME=$(GAME_NAME)																													\
		-e COMPONENTS=$(COMPONENTS);

plugins: deleteLibraries
	@-$(foreach PLUGIN, $(PLUGINS),	 																												\
		$(eval CUSTOM_PLUGIN_MAKEFILE=$(PLUGINS_FOLDER)/$(PLUGIN)/makefile)																			\
		$(eval PLUGIN_FILE=$(GAME_HOME)/build/lib$(shell echo $(PLUGIN) | sed -e "s@.*/@@"))														\
		if [ ! -f $(PLUGIN_FILE).a ]; then 																											\
			$(MAKE) --no-print-directory	 																										\
				$(PLUGIN_FILE).a 																													\
				-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
				-e CONFIG_FILE=$(CONFIG_FILE) 																										\
				-e DEBUG_CONFIG_FILE=$(DEBUG_CONFIG_FILE) 																							\
				-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
				-e GAME_HOME=$(GAME_HOME)																											\
				-e MAKE_JOBS=$(MAKE_JOBS)																											\
				-e NAME=$(PLUGIN)																													\
				-e GAME_NAME=$(GAME_NAME)																											\
				-e COMPONENTS=$(COMPONENTS);																										\
		fi;																																			\
	)																																				\

deleteLibraries:

# Cleans up the objects, .d files and executables.
clean:
	@echo Cleaning $(CLEAN_TYPE)
	@rm -Rf $(FOLDER_TO_CLEAN)
	@echo "Cleaning done."

# Create necessary directories
#DIRS_EXIST=$(shell [ -e $(WORKING_FOLDER)/objects/$(NAME) ] && echo 1 || echo 0 )
# Making the check to fail handles new folders without trouble
DIRS_EXIST=0

createEngineDirs:
ifeq ($(DIRS_EXIST), 0)
	@$(MAKE) --no-print-directory dirs																										\
		-f $(ENGINE_HOME)/makefile																											\
		-e GAME_HOME=$(GAME_HOME)																											\
		-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
		-e NAME=$(ENGINE_NAME);
endif

createPluginDirs:
ifeq ($(DIRS_EXIST), 0)
	@-$(foreach PLUGIN, $(PLUGINS), 	 																										\
		$(eval CUSTOM_PLUGIN_MAKEFILE=$(PLUGINS_FOLDER)/$(PLUGIN)/makefile)																		\
		$(eval PLUGIN_FILE=$(BUILD_DIR)/lib$(shell echo $(PLUGIN) | sed -e "s@.*/@@").a )														\
		$(MAKE) --no-print-directory dirs																										\
			-f $(shell if [ -f $(CUSTOM_PLUGIN_MAKEFILE) ]; then echo $(CUSTOM_PLUGIN_MAKEFILE); else echo $(PLUGIN_MAKEFILE); fi; )			\
			-e GAME_HOME=$(GAME_HOME)																											\
			-e GAME_CONFIG_MAKE_FILE=$(GAME_CONFIG_MAKE_FILE) 																					\
			-e NAME=$(PLUGIN);																													\
	)
endif

printDirsInfo: phony
ifeq ($(DIRS_EXIST), 0)
#	@$(eval CHECKING_DIRS_START_TIME=$(shell date +%s))
#	@echo "*** Checking working folders for $(BASENAME)"
	@echo -n Creating working dirs for $(BASENAME)...
endif

dirs:
ifeq ($(DIRS_EXIST), 0)
	@mkdir -p $(WORKING_FOLDER)/traces
	@mkdir -p $(WORKING_FOLDER)/classes/dictionaries
	@mkdir -p $(WORKING_FOLDER)/classes/dependencies/$(NAME)
	@mkdir -p $(WORKING_FOLDER)/classes/hierarchies/$(NAME)
	@mkdir -p $(WORKING_FOLDER)/objects/hashes/$(NAME)
	@mkdir -p $(WORKING_FOLDER)/../assets/$(NAME)
	@rm -Rf $(WORKING_FOLDER)/classes/locks
	@-$(foreach DIR,$(SOURCES_DIRS_CLEAN), mkdir -p $(WORKING_FOLDER)/objects/$(NAME)/$(DIR); )
	@-$(foreach DIR,$(ASSETS_DIRS_CLEAN), mkdir -p $(WORKING_FOLDER)/../assets/$(NAME)/$(DIR); )
#	@echo " done"
#	@$(eval CHECKING_DIRS_END_TIME=$(shell date +%s))
#	@echo "Total time:" $$(( ($(CHECKING_DIRS_END_TIME) - $(CHECKING_DIRS_START_TIME)) / 60 ))" min. "$$(( ($(CHECKING_DIRS_END_TIME) - $(CHECKING_DIRS_START_TIME)) % 60 ))" sec."
endif

phony:
	@echo > /dev/null
