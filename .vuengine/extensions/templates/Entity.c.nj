{% include('./base/header.c.nj') %}


//---------------------------------------------------------------------------------------------------------
//												INCLUDES
//---------------------------------------------------------------------------------------------------------

#include <Libgccvb.h>
#include <FinishLine.h>
#include <BgmapAnimatedSprite.h>
#include <Box.h>


//---------------------------------------------------------------------------------------------------------
//												DECLARATIONS
//---------------------------------------------------------------------------------------------------------

{% for sprite in currentItem.sprites -%}
extern BYTE {{ sprite.texture.image.name }}Tiles[];
extern BYTE {{ sprite.texture.image.name }}Map[];
{% endfor %}

{% if currentItem.animations.definitions.length -%}
//---------------------------------------------------------------------------------------------------------
//												ANIMATIONS
//---------------------------------------------------------------------------------------------------------

{% for animation in currentItem.animations.definitions -%}
AnimationFunctionROMSpec {{ currentItem.name | toUpperSnakeCase }}_{{ animation.name | toUpperSnakeCase }}_ANIM =
{
	// number of frames of this animation function
	{{ animation.frames.length }},

	// frames to play in animation
	{
		{{ animation.frames }}
	},

	// number of cycles a frame of animation is displayed
	{{ animation.cycles }},

	// whether to play it in loop or not
	{{ animation.loop }},

	// method to call on function completion
	{% if animation.callback %}(EventListener){{ animation.callback }}{% else %}NULL{% endif %},

	// function's name
	"{{ animation.name }}",
};

{% endfor -%}

AnimationDescriptionROMSpec {{ currentItem.name | toUpperSnakeCase }}_ANIM =
{
	{
		{% for animation in currentItem.animations.definitions -%}
			(AnimationFunction*)&{{ currentItem.name | toUpperSnakeCase }}_{{ animation.name | toUpperSnakeCase }}_ANIM,
		{% endfor -%}
		NULL
	}
};
{% endif %}

{% if currentItem.sprites.length -%}
//---------------------------------------------------------------------------------------------------------
//												SPRITES
//---------------------------------------------------------------------------------------------------------

{% for sprite in currentItem.sprites -%}
CharSetROMSpec {{ currentItem.name | toUpperSnakeCase }}_{{ loop.index }}_CH =
{
	// number of chars, depending on allocation type:
	// __ANIMATED_SINGLE*, __ANIMATED_SHARED*: number of chars of a single animation frame (cols * rows)
	// __ANIMATED_MULTI, __NOT_ANIMATED: sum of all chars
	{% if sprite.texture.charset.type == 'animatedMulti' or sprite.texture.charset.type == 'notAnimated' -%}
	{{ sprite.texture.image.chars }},
	{%- else -%}
	{{ sprite.texture.size.x * sprite.texture.size.y }},
	{%- endif %}

	// allocation type
	// (__ANIMATED_SINGLE, __ANIMATED_SINGLE_OPTIMIZED, __ANIMATED_SHARED, __ANIMATED_SHARED_COORDINATED, __ANIMATED_MULTI or __NOT_ANIMATED)
	__{{ sprite.texture.charset.type | toUpperSnakeCase }},

	// char spec
	{{ sprite.texture.image.name }}Tiles,
};

TextureROMSpec {{ currentItem.name | toUpperSnakeCase }}_{{ loop.index }}_TX =
{
	// charset spec
	(CharSetSpec*)&{{ currentItem.name | toUpperSnakeCase }}_{{ loop.index }}_CH,

	// bgmap spec
	{{ sprite.texture.image.name }}Map,

	// cols (max 64)
	{{ sprite.texture.size.x }},

	// rows (max 64)
	{{ sprite.texture.size.y }},

	// padding for affine/hbias transformations
	{
		{{ sprite.texture.padding.x }}, // cols
		{{ sprite.texture.padding.y }},	// rows
	},

	// number of frames, depending on charset's allocation type:
	// __ANIMATED_SINGLE*, __ANIMATED_SHARED*, __NOT_ANIMATED: 1
	// __ANIMATED_MULTI: total number of frames
	{% if sprite.texture.charset.type == 'animatedMulti' and currentItem.animations.definitions.length -%}
	{{ currentItem.animations.definitions.length }}
	{%- else -%}
	1,
	{%- endif %}

	// palette number (0-3)
	{{ sprite.texture.palette }},

	// recyclable
	{{ sprite.texture.recyclable }},
};

BgmapSpriteROMSpec {{ currentItem.name | toUpperSnakeCase }}_{{ loop.index }}_SP =
{
	{
		// sprite's type
		__TYPE(BgmapAnimatedSprite),

		// texture spec
		(TextureSpec*)&{{ currentItem.name | toUpperSnakeCase }}_TX,

		// transparency (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)
		__TRANSPARENCY_{{ sprite.transparency }},

		// displacement
		{
			{{ sprite.displacement.x }}, // x
			{{ sprite.displacement.y }}, // y
			{{ sprite.displacement.z }}, // z
			{{ sprite.displacement.parallax }}, // parallax
		},
	},

	// bgmap mode (__WORLD_BGMAP, __WORLD_AFFINE, __WORLD_OBJECT or __WORLD_HBIAS)
	// make sure to use the proper corresponding sprite type throughout the spec (BgmapSprite or ObjectSprite)
	__WORLD_{{ sprite.bgmapMode }},

	// pointer to affine/hbias manipulation function
	{% if sprite.manipulationFunction %}(ParamTableEffectMethod){{ sprite.manipulationFunction }}{% else %}NULL{% endif %},

	// display mode (__WORLD_ON, __WORLD_LON or __WORLD_RON)
	__WORLD_{{ sprite.displayMode }},
};

{% endfor -%}

BgmapSpriteROMSpec* const {{ currentItem.name | toUpperSnakeCase }}_SPS[] =
{
	{% for sprite in currentItem.sprites -%}
	&{{ currentItem.name | toUpperSnakeCase }}_{{ loop.index }}_SP,
	{% endfor -%}
	NULL
};
{%- endif %}


//---------------------------------------------------------------------------------------------------------
//												ENTITY
//---------------------------------------------------------------------------------------------------------

{{ currentItem.entity.class }}ROMSpec {{ currentItem.name | toUpperSnakeCase }}_EN =
{
	// animated entity
	{
		// entity
		{
			// class allocator
			__TYPE({{ currentItem.entity.class }}),

			// behaviors
			NULL,

			// sprites
			(SpriteSpec**){{ currentItem.name | toUpperSnakeCase }}_SPS,

			// collision shapes
			(ShapeSpec*)NULL,

			// size
			// if 0, width and height will be inferred from the first sprite's texture's size
			{
				{{ currentItem.entity.size.x }}, // x
				{{ currentItem.entity.size.y }}, // y
				{{ currentItem.entity.size.z }}, // z
			},

			// gameworld's character's type
			{{ currentItem.collisions.type }},

			// physical specification
			(PhysicalSpecification*)NULL,
		},

		// pointer to the animation spec for the item
		(AnimationDescription*)&{{ currentItem.name | toUpperSnakeCase }}_ANIM,

		// initial animation
		"{{ currentItem.animations.default }}",
	}
};