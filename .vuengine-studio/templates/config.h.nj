{%- import 'partials/macros.nj' as macros -%}
{% include('partials/fileHeader.h.nj') %}

#ifndef CONFIG_H_
#define CONFIG_H_


{{ macros.sectionHeader('Includes') }}

#include "pluginsConfig.h"
#include "romHeader.h"

{% if engine.game | length -%}
{{ macros.sectionHeader('Game specific macros') }}

{% for gameConfig in engine.game -%}
{%- if (gameConfig.type === 'text') -%}
	{%- set gameConfigValue = '"' ~ gameConfig.value ~ '"' -%}
{%- elseif (gameConfig.type === 'boolean') -%}
	{%- if gameConfig.value === true -%}
		{%- set gameConfigValue = 1 -%}
	{%- else -%}
		{%- set gameConfigValue = 0 -%}
	{%- endif -%}
{%- else -%}
	{%- set gameConfigValue = gameConfig.value -%}
{%- endif -%}
#define {{ gameConfig.key | toUpperSnakeCase }} {{ gameConfigValue | safe }}
{% endfor %}

{% endif -%}


{{ macros.sectionHeader('Fixed point data type') }}

#define __FIXED_POINT_TYPE 											{% if engine.math.fixedPointPrecision %}{{engine.math.fixedPointPrecision}}{% else %}6{% endif %}


{{ macros.sectionHeader('Communications') }}

// Enable communications at the start of the game
{% if engine.communications.enable %}#define{% else %}#undef{% endif %} __ENABLE_COMMUNICATIONS


{{ macros.sectionHeader('Debugging / Profiling') }}

// print memory pool's status
{% if engine.debug.showMemoryPoolStatus %}#define{% else %}#undef{% endif %} __SHOW_MEMORY_POOL_STATUS
{% if engine.debug.showDetailedMemoryPoolStatus %}#define{% else %}#undef{% endif %} __SHOW_DETAILED_MEMORY_POOL_STATUS

// Enable profiler
{% if engine.debug.enableProfiler %}#define{% else %}#undef{% endif %} __ENABLE_PROFILER

// print frame rate
{% if engine.debug.printFramerate %}#define{% else %}#undef{% endif %} __PRINT_FRAMERATE

// alert stack overflows
{% if engine.debug.showStackOverflowAlert %}#define{% else %}#undef{% endif %} __SHOW_STACK_OVERFLOW_ALERT

// enable streaming's profiling
{% if engine.debug.profileStreaming %}#define{% else %}#undef{% endif %} __PROFILE_STREAMING

// show streaming's profiling during game
{% if engine.debug.showStreamingProfiling %}#define{% else %}#undef{% endif %} __SHOW_STREAMING_PROFILING

// dimm screen to make it easier to read the profiling output
{% if engine.debug.dimmForProfiling %}#define{% else %}#undef{% endif %} __DIMM_FOR_PROFILING

// alert vip's overtime
{% if engine.debug.alertVipOvertime %}#define{% else %}#undef{% endif %} __SHOW_VIP_OVERTIME_COUNT

// stack headroom
#define __STACK_HEADROOM											{{ engine.debug.stackHeadroom }}


{{ macros.sectionHeader('Debugging tools') }}

// If tools already defined, enable all
#ifdef __TOOLS

// tools
#ifndef __DEBUG_TOOLS
#define __DEBUG_TOOLS
#endif

#ifndef __STAGE_EDITOR
#define __STAGE_EDITOR
#endif

#ifndef __ANIMATION_INSPECTOR
#define __ANIMATION_INSPECTOR
#endif

#ifndef __SOUND_TEST
#define __SOUND_TEST
#endif

#endif

// Enable different settings for each tool
#ifdef __DEBUG_TOOLS
#ifndef __TOOLS
#define __TOOLS
#endif

#endif

#ifdef __STAGE_EDITOR
#ifndef __TOOLS
#define __TOOLS
#endif
#endif

#ifdef __ANIMATION_INSPECTOR
#ifndef __TOOLS
#define __TOOLS
#endif
#endif

#ifdef __SOUND_TEST
#ifndef __TOOLS
#define __TOOLS
#endif
#endif


{{ macros.sectionHeader('Wireframes') }}

{% if engine.wireframe.sort %}
	{%- if engine.wireframe.sort === false -%}
#undef __WIREFRAME_MANAGER_SORT_FOR_DRAWING
	{%- else -%}
#define __WIREFRAME_MANAGER_SORT_FOR_DRAWING
	{%- endif -%}
{%- else -%}
#define __WIREFRAME_MANAGER_SORT_FOR_DRAWING
{% endif -%}


{{ macros.sectionHeader('Direct drawing') }}

{% if engine.directDraw.interlacedThreshold %}#define __DIRECT_DRAW_INTERLACED_THRESHOLD								__PIXELS_TO_METERS({{engine.directDraw.interlacedThreshold}}) {% else %}#define __DIRECT_DRAW_INTERLACED_THRESHOLD								0{% endif %} 


{{ macros.sectionHeader('Optics / Projection') }}

// legacy coordinate system (0, 0, 0) is at the top left corner of the screen
{% if engine.optics.useLegacyCoordinateProjection %}#define{% else %}#undef{% endif %} __LEGACY_COORDINATE_PROJECTION

// screen width in pixels
#define __SCREEN_WIDTH												{{ engine.optics.screenWidth }}

// screen height in pixels
#define __SCREEN_HEIGHT												{{ engine.optics.screenHeight }}

// screen depth in pixels
#define __SCREEN_DEPTH												{{ engine.optics.screenDepth }}

// maximum x view distance (depth) (power of two)
#define __MAXIMUM_X_VIEW_DISTANCE									{{ engine.optics.maximumXViewDistance }}

// maximum y view distance (depth) (power of two)
#define __MAXIMUM_Y_VIEW_DISTANCE									{{ engine.optics.maximumYViewDistance }}

// distance from player's eyes to the virtual screen
#define __CAMERA_NEAR_PLANE											{{ engine.optics.cameraNearPlane }}

// distance between eyes
#define __BASE_FACTOR												{{ engine.optics.baseFactor }}

// player's eyes' horizontal position
#define __HORIZONTAL_VIEW_POINT_CENTER								{{ engine.optics.horizontalViewPointCenter }}

// player's eyes' vertical position
#define __VERTICAL_VIEW_POINT_CENTER								{{ engine.optics.verticalViewPointCenter }}

// parallax values are divide by this factor to control their strength
#define __PARALLAX_CORRECTION_FACTOR								{{ engine.optics.parallaxCorrectionFactor }}

// affects the strength of the scaling
#define __SCALING_MODIFIER_FACTOR									{{ engine.optics.scalingModifierFactor }}{% if not '.' in '' ~ engine.optics.scalingModifierFactor %}.0{% endif %}f

// minimum number of pixels that the camera can move
#define __CAMERA_MINIMUM_DISPLACEMENT_PIXELS_POWER					{{ engine.optics.cameraMinimumDisplacementPixelsPower }}


{{ macros.sectionHeader('Frame rate control') }}

// when defined, the engine skips to the next game frame when the VIP's GAMESTART interrupt is fired
// beforethe current game frame is done
{% if engine.frameRate.forceVipSync %}#define{% else %}#undef{% endif %} __FORCE_VIP_SYNC

// timer resolution
#define __TIMER_RESOLUTION											{{ engine.frameRate.timerResolution }}

// __FRAME_CYCLE = 0 means __TARGET_FPS = 50
// __FRAME_CYCLE = 1 means __TARGET_FPS = 25
#define	__FRAME_CYCLE												{{ engine.frameRate.frameCycle }}

// target frames per second
#define __TARGET_FPS 												(__MAXIMUM_FPS >> __FRAME_CYCLE)

// milliseconds that must take to complete a game cycle
#define __GAME_FRAME_DURATION										(__MILLISECONDS_PER_SECOND / __TARGET_FPS)

// target frames per second
#define __OPTIMUM_FPS 												(__TARGET_FPS >> __FRAME_CYCLE)

// define to dispatch the delayed messages every other game frame cycle
{% if engine.frameRate.runDelayedMessagesAtHalfFrameRate %}#define{% else %}#undef{% endif %} __RUN_DELAYED_MESSAGES_DISPATCHING_AT_HALF_FRAME_RATE


{{ macros.sectionHeader('Animation') }}

// maximum length of an animation function's name
#define __MAX_ANIMATION_FUNCTION_NAME_LENGTH						{{ engine.animation.maxAnimationFunctionNameLength }}

// maximum number of frames per animation function
#define __MAX_FRAMES_PER_ANIMATION_FUNCTION							{{ engine.animation.maxFramesPerAnimationFunction }}

// maximum number of animation functions per description
#define __MAX_ANIMATION_FUNCTIONS									{{ engine.animation.maxAnimationFunctions }}


{{ macros.sectionHeader('Memory pool') }}

// reset to 0 each byte of each free block on resetting game
// only use for debugging, proper object's initialization must make this macro unnecessary
{% if engine.memoryPools.cleanUp %}#define{% else %}#undef{% endif %} __MEMORY_POOL_CLEAN_UP

#undef __MEMORY_POOLS
#define __MEMORY_POOLS												{{ engine.memoryPools.pools | length }}

#undef __MEMORY_POOL_ARRAYS
#define __MEMORY_POOL_ARRAYS \
{%- set poolBlockDefinitions = '' -%}
{% for pool in engine.memoryPools.pools %}
	{%- set poolBlockDefinitions = '	__BLOCK_DEFINITION(' ~ pool.size ~ ', ' ~  pool.objects ~') \\\n' ~ poolBlockDefinitions -%}
{% endfor %}
{{ poolBlockDefinitions }}
#undef __SET_MEMORY_POOL_ARRAYS
#define __SET_MEMORY_POOL_ARRAYS \
{%- set poolArrayDefinitions = '' -%}
{% for pool in engine.memoryPools.pools -%}
	{%- set poolArrayDefinitions = '	__SET_MEMORY_POOL_ARRAY(' ~ pool.size ~ ') \\\n' ~ poolArrayDefinitions -%}
{% endfor %}
{{ poolArrayDefinitions }}
// percentage (0-100) above which the memory pool's status shows the pool usage
#define __MEMORY_POOL_WARNING_THRESHOLD								{{ engine.memoryPools.warningThreshold }}


{{ macros.sectionHeader('SRAM') }}

// amount of available sram space, in bytes
// â€¢ the vb allows up to 16 mb, but all known carts support only 8 kb of sram
#define __TOTAL_SAVE_RAM 											{{ engine.sram.totalSram }}


{{ macros.sectionHeader('Char management') }}

// total number of available chars in char memory
#define __CHAR_MEMORY_TOTAL_CHARS 									{{ engine.char.totalChars }}


{{ macros.sectionHeader('Sprite management') }}

// total number of layers (basically the number of worlds)
#define __TOTAL_LAYERS												{{ engine.sprite.totalLayers }}

// Account for VIP's design to draw 8 pixel when BGMAP WORLD's height is less than 8
{% if engine.sprite.hackBgmapSpriteHeight %}#define{% else %}#undef{% endif %} __HACK_BGMAP_SPRITE_HEIGHT


{{ macros.sectionHeader('Texture management') }}

// total number of bgmap segments
{%- set dramLength = compiler.memory.sections.dram.length %}
{%- set bgmapEndAddress = ((compiler.memory.sections.dram.origin | hexToInt) + dramLength*1024) %}
{%- set bgmapStartAddress = ("0x20000") | hexToInt %}
#define __TOTAL_NUMBER_OF_BGMAPS_SEGMENTS 							{{ ((bgmapEndAddress - bgmapStartAddress) / 8192 - 0.5) | round }}

// number of segments for param tables
#define __PARAM_TABLE_SEGMENTS										{{ engine.texture.paramTableSegments }}

// bgmap segments to use (1 for printing)
#define __MAX_NUMBER_OF_BGMAPS_SEGMENTS 							(__TOTAL_NUMBER_OF_BGMAPS_SEGMENTS - __PARAM_TABLE_SEGMENTS)

// number of bgmap specs in each bgmap segment
#define __NUM_BGMAPS_PER_SEGMENT 									{{ engine.texture.bgmapsPerSegments }}

// printing area
#define __PRINTING_BGMAP_X_OFFSET									{{ engine.texture.printing.offset.x }}
#define __PRINTING_BGMAP_Y_OFFSET									(64 * 8 - __SCREEN_HEIGHT)
#define __PRINTING_BGMAP_PARALLAX_OFFSET							{{ engine.texture.printing.offset.parallax }}
#define __PRINTABLE_BGMAP_AREA				 						{{ engine.texture.printing.printableArea }}


{{ macros.sectionHeader('Param table') }}

// maximum possible scale: affects param table allocation space
#define __MAXIMUM_SCALE												{{ engine.affine.maxScale }}

// maximum number of rows to write on each call to affine calculation functions
#define __MAXIMUM_AFFINE_ROWS_PER_CALL								{{ engine.affine.maxRowsPerCall }}


{{ macros.sectionHeader('Physics') }}

#define __GRAVITY													{{ engine.physics.gravity }}{% if not '.' in '' ~ engine.physics.gravity %}.0{% endif %}f

// number of bodies to check for gravity on each cycle
#define __BODIES_TO_CHECK_FOR_GRAVITY								{{ engine.physics.bodiesToCheckForGravity }}

// maximum friction coefficient
#define __MAXIMUM_FRICTION_COEFFICIENT								{% if engine.physics.maximumFrictionCoefficient %}__I_TO_FIXED({{engine.physics.maximumFrictionCoefficient }}){% else %}__I_TO_FIXED(1){% endif %}

// divisor to speed up physics simulations, bigger numbers equal faster computations
#define __PHYSICS_TIME_ELAPSED_DIVISOR								{{ engine.physics.timeElapsedDivisor }}

// define to use fix7.9 computation on Body's direction
{% if engine.physics.highPrecision %}#define{% else %}#undef{% endif %} 		__PHYSICS_HIGH_PRECISION

// thresholds to stop bodies
#define __STOP_VELOCITY_THRESHOLD									__PIXELS_TO_METERS({{ engine.physics.stopVelocityThreshold }})
#define __STOP_BOUNCING_VELOCITY_THRESHOLD 							__PIXELS_TO_METERS({{ engine.physics.stopBouncingVelocityThreshold }})

// maximum bounciness coefficient allowed
#define __MAXIMUM_BOUNCINESS_COEFFICIENT							{{ engine.physics.maximumBouncinessCoefficient }}{% if not '.' in '' ~ engine.physics.maximumBouncinessCoefficient %}.0{% endif %}f

#define __FRICTION_FORCE_FACTOR_POWER								{{ engine.physics.frictionForceFactorPower }}

{{ macros.sectionHeader('Sound') }}

#define __LEFT_EAR_CENTER											{{ engine.sound.leftEarCenter }}
#define __RIGHT_EAR_CENTER											{{ engine.sound.rightEarCenter }}

// affects the amount of attenuation caused by the distance between the x coordinate and each ear's
// position defined by __LEFT_EAR_CENTER and __RIGHT_EAR_CENTER
#define __SOUND_STEREO_HORIZONTAL_ATTENUATION_FACTOR				{{ engine.sound.stereoHorizontalAttenuationFactor }}
#define __SOUND_STEREO_VERTICAL_ATTENUATION_FACTOR					{{ engine.sound.stereoVerticalAttenuationFactor }}

// smaller values allow movement to start when colliding against a shape and trying to move towards it
#define __SHAPE_ANGLE_TO_PREVENT_DISPLACEMENT						{% if engine.physics.angleToPreventShapeDisplacement %}__FIX7_9_TO_FIXED(__COS({{ engine.physics.angleToPreventShapeDisplacement }})){% else %}__F_TO_FIXED(0.01f){% endif %}

// maximum size of shapes allows to avoid checks against far away shapes
#define __SHAPE_MAXIMUM_SIZE										__PIXELS_TO_METERS({% if engine.physics.shapesMaximumSize %}{{ engine.physics.shapesMaximumSize }}{% else %}512{% endif %})

#define __SHAPE_MAXIMUM_SIZE										__PIXELS_TO_METERS({% if engine.physics.shapesMaximumSize %}{{ engine.physics.shapesMaximumSize }}{% else %}512{% endif %})


{{ macros.sectionHeader('Brightness') }}

// default brightness settings, actual values are set in stage specs
// â€¢ for a nice progression, each shade should be about twice as big as the previous one
// â€¢ _BRIGHT_RED must be larger than _DARK_RED + _MEDIUM_RED
#define __BRIGHTNESS_DARK_RED										{{ engine.colors.brightness.darkRed }}
#define __BRIGHTNESS_MEDIUM_RED										{{ engine.colors.brightness.mediumRed }}
#define __BRIGHTNESS_BRIGHT_RED										{{ engine.colors.brightness.brightRed }}

// default delay between steps in fade effect
#define __FADE_DELAY												{{ engine.colors.brightness.fadeDelay }}

// defaul step increment in fade transitions
#define __CAMERA_EFFECT_FADE_INCREMENT								{{ engine.colors.brightness.fadeIncrement }}

{{ macros.sectionHeader('Color palettes') }}

#define __PRINTING_PALETTE											{{ engine.colors.palettes.printingPalette }}

// default palette values, actual values are set in stage specs
#define __BGMAP_PALETTE_0											0b{{ engine.colors.palettes.bgMap[0][0] }}{{ engine.colors.palettes.bgMap[0][1] }}{{ engine.colors.palettes.bgMap[0][2] }}00
#define __BGMAP_PALETTE_1											0b{{ engine.colors.palettes.bgMap[1][0] }}{{ engine.colors.palettes.bgMap[1][1] }}{{ engine.colors.palettes.bgMap[1][2] }}00
#define __BGMAP_PALETTE_2											0b{{ engine.colors.palettes.bgMap[2][0] }}{{ engine.colors.palettes.bgMap[2][1] }}{{ engine.colors.palettes.bgMap[2][2] }}00
#define __BGMAP_PALETTE_3											0b{{ engine.colors.palettes.bgMap[3][0] }}{{ engine.colors.palettes.bgMap[3][1] }}{{ engine.colors.palettes.bgMap[3][2] }}00

#define __OBJECT_PALETTE_0											0b{{ engine.colors.palettes.object[0][0] }}{{ engine.colors.palettes.object[0][1] }}{{ engine.colors.palettes.object[0][2] }}00
#define __OBJECT_PALETTE_1											0b{{ engine.colors.palettes.object[1][0] }}{{ engine.colors.palettes.object[1][1] }}{{ engine.colors.palettes.object[1][2] }}00
#define __OBJECT_PALETTE_2											0b{{ engine.colors.palettes.object[2][0] }}{{ engine.colors.palettes.object[2][1] }}{{ engine.colors.palettes.object[2][2] }}00
#define __OBJECT_PALETTE_3											0b{{ engine.colors.palettes.object[3][0] }}{{ engine.colors.palettes.object[3][1] }}{{ engine.colors.palettes.object[3][2] }}00


{{ macros.sectionHeader('Random number generation') }}

{% if engine.random.addUserInputAndTimeToRandomSeed %}#define{% else %}#undef{% endif %} __ADD_USER_INPUT_AND_TIME_TO_RANDOM_SEED


{{ macros.sectionHeader('Exceptions') }}

// camera coordinates for the output of exceptions
#define __EXCEPTION_COLUMN											{{ engine.exception.position.x }}
#define __EXCEPTION_LINE											{{ engine.exception.position.y }}


#endif
