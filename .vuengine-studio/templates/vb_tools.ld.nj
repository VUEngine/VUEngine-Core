{% include('partials/fileHeader.ld.nj') %}

OUTPUT_FORMAT("elf32-v810", "elf32-v810", "elf32-v810")
OUTPUT("a.elf") /* force elf format output */
OUTPUT_ARCH(v810)
TARGET(elf32-v810)
ENTRY(_start)
SEARCH_DIR(.);

MEMORY
{
	{%- set extraDram = 3 -%}
	{%- set dramLength = compiler.memory.sections.dram.length - extraDram %}
	dram (!r) : ORIGIN = {{ ((compiler.memory.sections.dram.origin | hexToInt) + dramLength*1024) | intToHex(8) }}, LENGTH = {{ -dramLength }}k /* Add additional KBs needed for debug tools */
	wram (!r) : ORIGIN = {{ compiler.memory.sections.wram.origin }}, LENGTH = {{ compiler.memory.sections.wram.length }}k
	exp	 (r)  : ORIGIN = {{ compiler.memory.sections.exp.origin }}, LENGTH = {{ compiler.memory.sections.exp.length }}M
	sram (!r) : ORIGIN = {{ compiler.memory.sections.sram.origin }}, LENGTH = {{ compiler.memory.sections.sram.length }}M
	rom	 (rx) : ORIGIN = {{ compiler.memory.sections.rom.origin }}, LENGTH = {{ compiler.memory.sections.rom.length }}M
}

/*
If not defined, define interrupt
Handlers as system reset
*/

__dramVma = ORIGIN(dram);
__dataVma = ORIGIN(wram);
__expVma = ORIGIN(exp);
__sramVma = ORIGIN(sram);
__textVma = ORIGIN(rom);
__stack = ORIGIN(wram) + LENGTH(wram) - 64;

SECTIONS
{
	/* Read-only sections, merged into text segment: */
	.expdata __expVma (NOLOAD):
	{
		PROVIDE (__expDataStart = .);
		*(.expdata*)
		PROVIDE (__expDataEnd = .);
	} >exp = 0xFF

	.text __textVma :
	{
		PROVIDE (__textStart = .);
		*(.text*)
		PROVIDE (__textEnd = .);
	} >rom = 0xFF

	.rodata :
	{
		*(.rodata*)
	} >rom = 0xFF

	v = .;

	/* Ram memory */
	__dataLma = .;
	.data __dataVma : AT(__dataLma)
	{
		PROVIDE (__dataStart = .);
		*(.data*)
	} >wram = 0xFF

	.sdata ALIGN(2):
	{
		PROVIDE (__gp = . + 0x8000);
		*(.sdata*)
		PROVIDE (__dataEnd = .);
	} >wram = 0xFF

	.dram_data __dramVma : AT(v + SIZEOF(.data) + SIZEOF(.sdata))
	{
		PROVIDE (__dram_dirty_start = .);
		*(.dram_dirty*)
		PROVIDE (__dramDataStart = .);
		*(.dram_data*)
		PROVIDE (__dram_dataEnd = .);
	} >dram = 0xFF

	.sram_data __sramVma : AT(v + SIZEOF(.data) + SIZEOF(.sdata) + SIZEOF(.dram_data)) SUBALIGN(2)
	{
		PROVIDE (__sramDataStart = .);
		*(.sram_data*)
		PROVIDE (__sramDataEnd = .);
	} >sram = 0xFF

	.sbss (NOLOAD):
	{
		PROVIDE (__bssStart = .);
		*(.sbss*)
		*(.scommon*)
	} >wram = 0xFF

	.bss (NOLOAD):
	{
		*(.bss*)
		*(COMMON)
		PROVIDE (__bssEnd = .);
	} >wram = 0xFF

	.dram_bss (NOLOAD): AT(__dram_dataEnd)
	{
		PROVIDE(__dramBssStart = .);
		*(.dram_bss*)
		PROVIDE(__dramBssEnd = .);
	} >dram = 0xFF

	/* SRAM Work RAM */
	.sram_bss (NOLOAD): SUBALIGN(2)
	{
		PROVIDE(__sramBssStart = .);
		*(.sram_bss*)
		PROVIDE(__sramBssEnd = .);
	} >sram

	/* Prevent overlaps with vbvectors */
	/* The use of new variables is because GCC 4.7's linker doesn't override the v value */
	v1 = v + SIZEOF(.data) + SIZEOF(.sdata);

	/* Compute the vector address */
	/* This promotes . to a power of two */

	v2 = v1 + 0x1FF; 		/* add size of jump table */
	v3 = v2 & 0x00FFFFFF;
	v4 = v3 | (v3 >> 1);
	v5 = v4 | (v4 >> 2);
	v6 = v5 | (v5 >> 4);
	v7 = v6 | (v6 >> 8);
	v8 = v7 | (v7 >> 16);

	__vbvectors_vma = __textVma + v8 - 0x1FF;
	__rominfo_vma = __vbvectors_vma - 0x20;

	/* Place rom's info before the interrupt vectors */
	.rominfo __rominfo_vma :
	{
		KEEP (*(.rominfo))
	} >rom = 0xFF

	/* Place interrupt and reset vector at end of rom */
	.vbvectors __vbvectors_vma :
	{
		KEEP (*(.vbvectors))
	} >rom = 0xFF
}
