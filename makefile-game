# Project name
NAME = $(shell pwd | sed -e "s@.*/@@")

# Game name
GAME_NAME = $(NAME)

# Engine name
ENGINE_NAME = vuengine/core

# Engine's home
ENGINE_HOME = $(VBDE)libs/$(ENGINE_NAME)

# My home
MY_HOME = $(shell pwd)

# Where the game lives
GAME_HOME = $(MY_HOME)

# target's needed steps
ALL_TARGET_PREREQUISITES = dirs $(TARGET).vb $(PAD) $(DUMP_TARGET)

# Overrides file
GAME_CONFIG_MAKE_FILE = $(shell if [ -f $(MY_HOME)/config.make ]; then echo $(MY_HOME)/config.make; fi;)

# Common
include $(ENGINE_HOME)/makefile-common

# Override plugins
PLUGINS := $(ENGINE_NAME) $(PLUGINS)

ifneq ($(BUILD_MODE),)
TYPE = $(BUILD_MODE)
endif

DUMP_TARGET =
ifeq ($(DUMP_ELF), 1)
DUMP_TARGET = dump
endif

PAD =
ifeq ($(PAD_ROM), 1)
PAD = pad
endif

# linker script
LINKER_SCRIPT = $(shell pwd)/lib/compiler/linker/vb.ld

# the target file
TARGET_FILE = output
TARGET = $(WORKING_FOLDER)/$(TARGET_FILE)-$(TYPE)

# define the engine
VUENGINE = $(BUILD_DIR)/libvuengine.a

all: printPreBuildingInfo preprocessClasses plugins printBuildingInfo $(TARGET).vb $(PAD) $(DUMP_TARGET) printPostBuildingInfo

printPreBuildingInfo:
	@$(eval START_TIME=$(shell date +%s))
	@echo "Starting at: "$(shell date)
	@$(eval HUMAN_START_DATE=$(shell date +%H:%M:%S))
	@echo "Build type : $(TYPE)"
	@echo "Compiler   : $(COMPILER_NAME) $(COMPILER_VERSION)"
	@echo

printBuildingInfo:
	@echo ""
	@echo "********************************************* Building $(NAME) $(TYPE)"

printPostBuildingInfo:
	@$(eval END_TIME=$(shell date +%s))
	@echo Done compiling in $(TYPE) mode with GCC $(COMPILER_VERSION)
	@echo "Started at: "$(HUMAN_START_DATE)
	@echo "Ended   at: "$(shell date +%H:%M:%S)
	@echo "Total time:" $$(( ($(END_TIME) - $(START_TIME)) / 60 ))" min. "$$(( ($(END_TIME) - $(START_TIME)) % 60 ))" sec."

portToNewSyntax: dirs
	@bash $(ENGINE_HOME)/lib/compiler/preprocessor/cleanSyntax.sh $(ENGINE_HOME) $(MY_HOME)/source $(WORKING_FOLDER)

dump: $(TARGET).elf
	@$(OBJDUMP) -t $(TARGET).elf > $(WORKING_FOLDER)/sections-$(TYPE).txt
	@$(OBJDUMP) -S $(TARGET).elf > $(WORKING_FOLDER)/machine-$(TYPE).asm
	@echo "Memory map $(TARGET).map"
	@echo "Sections   $(WORKING_FOLDER)/sections-$(TYPE).txt"
	@echo "Assembly   $(WORKING_FOLDER)/machine-$(TYPE).asm"
	@echo

pad: $(TARGET).vb
	@echo Padding $(BUILD_DIR)/$(TARGET_FILE).vb
	@$(ENGINE_HOME)/lib/utilities/padder $(BUILD_DIR)/$(TARGET_FILE).vb 3
	@echo " "

$(TARGET).vb: compile $(TARGET).elf
	@$(OBJCOPY) -O binary $(TARGET).elf $@
	@cp $(TARGET).vb $(BUILD_DIR)/$(TARGET_FILE).vb

$(TARGET).elf: $(foreach PLUGIN, $(PLUGINS), $(shell echo $(PLUGIN) | sed -e "s@.*/@$(BUILD_DIR)/lib@").a) $(ASSEMBLY_OBJECTS) $(C_OBJECTS) $(SETUP_CLASSES_OBJECT).o $(FINAL_SETUP_CLASSES_OBJECT).o
	@echo Linking $(TARGET).elf...
	@$(GCC) -o $@ -nostartfiles -T$(LINKER_SCRIPT) -lm $(ASSEMBLY_OBJECTS) $(C_OBJECTS) $(SETUP_CLASSES_OBJECT).o $(FINAL_SETUP_CLASSES_OBJECT).o $(LD_PARAMS) \
		$(foreach PLUGIN, $(PLUGINS),-l$(shell echo $(PLUGIN) | sed -e "s@.*/@@")) $(foreach LIB,$(PLUGINS_PATH),-L$(LIB)) -Wl,-Map=$(TARGET).map
	@echo

deleteLibraries:
	@rm -f $(PLUGINS_PATH)/*.a

