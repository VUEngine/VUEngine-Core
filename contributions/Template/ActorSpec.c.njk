{%- import 'templates/partials/macros.njk' as macros -%}
{%- include('templates/partials/fileHeader/fileHeader.c.njk') -%}
{{ '\n\n' }}

{%- set sanitizedSpecName = itemUri | basename(false) | sanitizeSpecName -%}

{%- set isAnimated = false -%}
{%- if item.components.animations | length -%}
	{%- set isAnimated = true -%}
{%- endif -%}

{%- set isSpritesheetAnimation = false -%}
{%- if isAnimated and not item.animations.multiframe -%}
	{%- set isSpritesheetAnimation = true -%}
{%- endif -%}

{#- DETERMINE ACTOR CLASS -#}
{%- if item.extraProperties.customAllocator is defined and item.extraProperties.customAllocator != '' -%}
	{%- set actorClass = item.extraProperties.customAllocator -%}
{%- else -%}
	{%- set actorClass = 'Actor' -%}
{%- endif %}

{#- DETERMINE INCLUDES -#}
{%- set includes = [actorClass, 'Texture'] -%}
{%- if item.inGameType != '' -%}
	{%- set includes = (includes.push('InGameTypes'), includes) -%}
{%- endif -%}
{%- if item.physics.enabled -%}
	{%- set includes = (includes.push('Body'), includes) -%}
{%- endif -%}
{%- if item.components.sprites | length -%}
	{%- for sprite in item.components.sprites -%}
		{%- set spriteClass = item.sprites.type ~ 'Sprite' -%}
		{%- set spriteAllocatorClass = item.sprites.type ~ 'Sprite' -%}
		{%- if item.sprites.type == 'Bgmap' and not sprite.texture.repeat.x and not sprite.texture.repeat.y and sprite.colorMode == 1 and not isAnimated -%}
			{%- set spriteClass = 'FrameBlendBgmapSprite' -%}
			{%- set spriteAllocatorClass = 'FrameBlendBgmapSprite' -%}
		{%- elseif item.sprites.type == 'Bgmap' and (sprite.texture.repeat.x or sprite.texture.repeat.y) and isAnimated -%}
			{%- set spriteClass = 'MBgmapSprite' -%}
			{%- set spriteAllocatorClass = 'MBgmapSprite' -%}
		{%- elseif item.sprites.type == 'Bgmap' and (sprite.texture.repeat.x or sprite.texture.repeat.y) and not isAnimated -%}
			{%- set spriteClass = 'MBgmapSprite' -%}
			{%- set spriteAllocatorClass = 'MBgmapSprite' -%}
		{%- elseif isAnimated -%}
			{%- set spriteAllocatorClass = item.sprites.type ~ 'Sprite' -%}
		{%- endif -%}
		{%- set includes = (includes.push(spriteClass), includes) -%}
		{%- set includes = (includes.push(spriteAllocatorClass), includes) -%}
		{%- if sprite.bgmapMode == 'HBias' and sprite.manipulationFunction != '' %}
			{%- set includes = (includes.push(sprite.manipulationFunction.split('_')[0] ~ 'Extensions'), includes) -%}
		{%- endif %}
	{%- endfor -%}
{%- endif -%}
{%- if item.inGameType != '' and item.components.colliders | length -%}
	{%- for collider in item.components.colliders -%}
		{%- set includes = (includes.push(collider.type), includes) -%}
		{%- if collider.layers | length > 0 %}
			{%- set includes = (includes.push('ColliderLayers'), includes) -%}
		{%- endif %}
	{%- endfor -%}
{%- endif -%}
{%- if item.components.wireframes | length -%}
	{%- for wireframe in item.components.wireframes -%}
		{%- set includes = (includes.push(wireframe.type), includes) -%}
	{%- endfor -%}
{%- endif -%}

{#- PRINT INCLUDES -#}
{%- if includes | length -%}

{{- macros.sectionHeader('Includes') ~ '\n\n' -}}

{%- for include in includes | unique | sort -%}
#include <{{ include }}.h>
{% endfor %}
{%- endif %}

{#- PRINT IMAGE DATA AND SPRITES -#}
{%- if item.components.sprites | length -%}

{{- '\n' ~ macros.sectionHeader('Declarations') ~ '\n\n' -}}

{%- for sprite in item.components.sprites -%}
	{%- if not sprite._imageData | int and sprite._imageData.images | length -%}
		{%- for imageData in sprite._imageData.images -%}
			{#- Tiles -#}
			{%- if imageData.tiles.data -%}
				extern uint32 {{ sanitizedSpecName ~ 'Actor' ~ imageData.tiles.name | sanitizeSpecName }}Tiles[];{{ '\n' }}
			{%- endif -%}
			{#- Maps -#}
			{%- for map in imageData.maps -%}
				{%- set mapName = sanitizedSpecName ~ 'Actor' ~ map.name | sanitizeSpecName -%}
				extern uint16 {{ mapName }}Map[];{{ '\n' }}
			{%- endfor -%}
			{#- Frame Offsets -#}
			{%- if imageData.tiles.frameOffsets is defined -%}
				extern uint32 {{ sanitizedSpecName ~ 'Actor' ~ imageData.tiles.name | sanitizeSpecName }}TilesFrameOffsets[];{{ '\n' }}
			{%- endif -%}
		{%- endfor -%}
	{%- endif -%}
{%- endfor -%}

{{- '\n' ~ macros.sectionHeader('Sprites') ~ '\n' -}}

{%- set spriteNames = [] -%}
{%- for sprite in item.components.sprites -%}
{%- set spriteNumber = loop.index -%}

{%- set spriteClass = item.sprites.type ~ 'Sprite' -%}
{%- set spriteAllocatorClass = item.sprites.type ~ 'Sprite' -%}
{%- if item.sprites.type == 'Bgmap' and not sprite.texture.repeat.x and not sprite.texture.repeat.y and sprite.colorMode == 1 and not isAnimated -%}
	{%- set spriteClass = 'FrameBlendBgmapSprite' -%}
	{%- set spriteAllocatorClass = 'FrameBlendBgmapSprite' -%}
{%- elseif item.sprites.type == 'Bgmap' and (sprite.texture.repeat.x or sprite.texture.repeat.y) and isAnimated -%}
	{%- set spriteClass = 'MBgmapSprite' -%}
	{%- set spriteAllocatorClass = 'MBgmapSprite' -%}
{%- elseif item.sprites.type == 'Bgmap' and (sprite.texture.repeat.x or sprite.texture.repeat.y) and not isAnimated -%}
	{%- set spriteClass = 'MBgmapSprite' -%}
	{%- set spriteAllocatorClass = 'MBgmapSprite' -%}
{%- elseif isAnimated -%}
	{%- set spriteAllocatorClass = item.sprites.type ~ 'Sprite' -%}
{%- endif -%}

{%- set isStereo = sprite.texture.files2 is defined and sprite.texture.files2 | length > 0 -%}
{%- set isStereoAnimation = sprite._imageData.images and sprite._imageData.images | length == 2 -%}
{%- for eye in ['L', 'R'] -%}
{%- if eye === 'L' or isStereo -%}
{%- set spriteImageData = sprite._imageData -%}
{%- if spriteImageData | int -%}
	{#- Resolve dupes -#}
	{%- set spriteImageData = item.components.sprites[sprite._imageData - 1]._imageData -%}
{%- endif -%}
{%- set imageData = spriteImageData.images[0] -%}
{%- set charsetSpecName = sanitizedSpecName ~ 'Sprite' ~ spriteNumber -%}
{%- if isStereoAnimation -%}
	{%- set imageData = spriteImageData.images[loop.index0] -%}
	{%- set charsetSpecName = charsetSpecName ~ eye -%}
{%- endif -%}
{%- set tilesName = sanitizedSpecName ~ 'Actor' ~ imageData.tiles.name -%}
{%- set spriteName = sanitizedSpecName ~ 'Sprite' ~ spriteNumber -%}
{%- if isStereo -%}
	{%- set spriteName = spriteName ~ eye -%}
{%- endif -%}
{%- set spriteNames = (spriteNames.push(spriteName), spriteNames) -%}
{%- set isOptimizedAnimation = false -%}
{%- if isAnimated and imageData.animation.largestFrame is defined -%}
	{%- set isOptimizedAnimation = true -%}
{%- endif -%}

{%- if imageData.tiles is defined and (eye !== 'R' or isStereoAnimation) %}
CharSetROMSpec {{ charsetSpecName }}CharsetSpec =
{
	// Number of CHARs in function of the number of frames to load at the same time
	{%- if isOptimizedAnimation %}
	{{ imageData.animation.largestFrame }},
	{%- elseif isSpritesheetAnimation %}
	{{ (imageData.tiles.count / item.animations.totalFrames) | round(0, "floor") }},
	{%- else %}
	{{ imageData.tiles.count }},
	{%- endif %}

	// Whether it is shared or not
	{%- if isSpritesheetAnimation %}
	false,
	{%- else %}
	true,
	{%- endif %}

	// Whether the tiles are optimized or not
	{%- if isOptimizedAnimation %}
	true,
	{%- elseif isSpritesheetAnimation %}
	false,
	{%- else %}
	{{ sprite.optimizeTiles }},
	{%- endif %}

	// Tiles array
	{{ tilesName }}Tiles,

	// Frame offsets array
	{%- if imageData.tiles.frameOffsets is defined and imageData.tiles.frameOffsets | length %}
	{{ tilesName }}TilesFrameOffsets,
	{%- else %}
	NULL,
	{%- endif %}
};

{% endif -%}

TextureROMSpec {{ spriteName }}TextureSpec =
{
	// Pointer to the char spec that the texture uses
	(CharSetSpec*)&{{ charsetSpecName }}CharsetSpec,

	// Pointer to the map array that defines how to use the tiles from the char set
	{% if isStereo and not isStereoAnimation and eye === 'R' -%}
	{{ sanitizedSpecName ~ 'Actor' ~ imageData.maps[1].name }}Map,
	{%- else -%}
	{{ sanitizedSpecName ~ 'Actor' ~ imageData.maps[0].name }}Map,
	{%- endif %}

	// Horizontal size in tiles of the texture (max. 64)
	{{ imageData.maps[0].width | round(0, "floor") }},

	// Vertical size in tiles of the texture (max. 64)
	{% set mapHeight = imageData.maps[0].height | round(0, "floor") -%}
	{%- if spriteClass == 'FrameBlendBgmapSprite' -%}
		{%- set mapHeight = mapHeight / 2 | round(0, "floor") -%}
	{%- endif -%}
	{%- if isSpritesheetAnimation and not isOptimizedAnimation -%}
		{%- set mapHeight = mapHeight / item.animations.totalFrames -%}
	{%- endif -%}
	{{ mapHeight }},

	// padding for affine/hbias transformations
	{{ '{' ~ sprite.texture.padding.x ~ ', ' ~ sprite.texture.padding.y ~ '}' }},

	// Number of frames that the texture supports
	{%- if isAnimated and item.animations.multiframe %}
	{{ item.animations.totalFrames }},
	{%- elseif spriteClass == 'FrameBlendBgmapSprite' %}
	2,
	{%- else %}
	1,
	{%- endif %}

	// Palette index to use by the graphical data (0 - 3)
	{{ sprite.texture.palette | default(0) }},

	// Flag to recyble the texture with a different map
	{{ sprite.texture.recycleable | default(false) }},

	// Flag to vertically flip the image
	{{ sprite.texture.flip.x | default(false) }},

	// Flag to horizontally flip the image
	{{ sprite.texture.flip.y | default(false) }},
};

{%- if spriteAllocatorClass == 'MBgmapSprite' or spriteAllocatorClass == 'MBgmapSprite' %}

TextureROMSpec* const {{ spriteName }}TextureSpecs[] =
{
	(TextureSpec*)&{{ spriteName }}TextureSpec,
	NULL
};
{%- endif %}

{{ spriteClass }}ROMSpec {{ spriteName }}SpriteSpec =
{
	{%- if spriteClass == 'FrameBlendBgmapSprite' %}
	{
	{%- endif %}
	{%- if spriteAllocatorClass == 'MBgmapSprite' %}
	{
	{%- endif %}
	{%- if spriteAllocatorClass == 'MBgmapSprite' %}
	{
	{%- endif %}
	{
		// VisualComponent
		{
			// Component
			{
				// Allocator
				__TYPE({{ spriteAllocatorClass }}),

				// Component type
				kSpriteComponent
			},

			// Array of function animations
			NULL,
		},

		// Spec for the texture to display
		{%- if spriteAllocatorClass == 'MBgmapSprite' or spriteAllocatorClass == 'MBgmapSprite' %}
		NULL,
		{%- else %}
		(TextureSpec*)&{{ spriteName }}TextureSpec,
		{%- endif %}

		// Transparency mode (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)
		__TRANSPARENCY_{{ sprite.transparency | upper }},

		// Displacement added to the sprite's position
		{{ '{' ~ sprite.displacement.x ~ ', ' ~ sprite.displacement.y ~ ', ' ~ sprite.displacement.z ~ ', ' ~ sprite.displacement.parallax ~ '}' }},
	},

	// Flag to indicate in which display to show the texture (__WORLD_ON, __WORLD_LON or __WORLD_RON)
	{% if isStereo -%}
	__WORLD_{{ eye }}ON,
	{%- else -%}
	__WORLD_{{ sprite.displays }},
	{%- endif %}

	// The display mode (__WORLD_BGMAP, __WORLD_AFFINE, __WORLD_OBJECT or __WORLD_HBIAS)
	// make sure to use the proper corresponding sprite type throughout the spec (BgmapSprite or ObjectSprite)
	{%- if item.sprites.type == 'Object' %}
	__WORLD_OBJECT,
	{%- else %}
	__WORLD_{{ sprite.bgmapMode | upper }},
	{% endif %}

	{%- if item.sprites.type != 'Object' %}
	// Pointer to affine/hbias manipulation function
	{% if sprite.manipulationFunction %}(ParamTableEffectMethod){{ sprite.manipulationFunction }}{% else %}NULL{% endif %},
	{%- endif %}

	{%- if spriteClass == 'FrameBlendBgmapSprite' %}
	}
	{%- endif %}
	{%- if spriteAllocatorClass == 'MBgmapSprite' %}
	}
	{%- endif %}
	{%- if spriteAllocatorClass == 'MBgmapSprite' or spriteAllocatorClass == 'MBgmapSprite' %}
	},

	// Texture to use with the sprite
	(TextureSpec**){{ spriteName }}TextureSpecs,

	// SCX/SCY value
	__WORLD_{{ sprite.texture.repeat.mode | default('1x1') }},

	// Flag to loop the x axis
	{{ sprite.texture.repeat.x | default(false) }},

	// Flag to loop the y axis
	{{ sprite.texture.repeat.y | default(false) }},

	// Bounds the sprite's width to provide culling; if 0, the value is inferred from the texture
	{{ sprite.texture.repeat.size.x | default(0) }},

	// Bounds the sprite's height to provide culling; if 0, the value is inferred from the texture
	{{ sprite.texture.repeat.size.y | default(0) }},
	{%- endif %}
};

{% endif -%}
{% endfor -%}
{% endfor -%}
{% endif -%}

{#- PRINT ANIMATIONS -#}
{%- if isAnimated -%}

{{- macros.sectionHeader('Animations') ~ '\n\n' -}}

{%- for animation in item.components.animations -%}
{%- if animation.name != '' -%}
	{%- set animationName = animation.name -%}
{%- else -%} 
	{%- set animationName = loop.index -%}
{%- endif -%}
AnimationFunctionROMSpec {{ sanitizedSpecName }}Animation{{ loop.index }}AnimationSpec =
{
	// Number of frames that the texture supports of this animation function
	{{ animation.frames | length }},

	// Frames to play in animation
	{
		{% for frame in animation.frames -%}
			{{ frame }}, {% if loop.index % 10 == 0 and not loop.last %}{{ "\n		" }}{% endif %}
		{%- endfor %}
	},

	// Number of cycles a frame of animation is displayed
	{{ animation.cycles }},

	// Whether to play it in loop or not
	{{ animation.loop }},

	// Animation's name
	"{{ animationName }}",
};

{% endfor -%}

AnimationFunctionROMSpec* const {{ sanitizedSpecName }}AnimationSpecs[] =
{
	{% for animation in item.components.animations -%}
	(AnimationFunction*)&{{ sanitizedSpecName }}Animation{{ loop.index }}AnimationSpec,
	{% endfor -%}
	NULL,
};
{% endif %}

{#- PRINT WIREFRAMES -#}
{%- if item.components.wireframes | length -%}

{{- '\n' ~ macros.sectionHeader('Wireframes') ~ '\n\n' -}}

{%- set wireframeNames = [] -%}
{%- for wireframe in item.components.wireframes -%}
{%- set wireframeName = sanitizedSpecName ~ 'Wireframe' ~ loop.index -%}
{%- set wireframeNames = (wireframeNames.push(wireframeName), wireframeNames) -%}

{% if wireframe.type == 'Mesh' -%}
const PixelVector {{ wireframeName }}WireframeSegments[][2]=
{
	{%- for segment in wireframe.segments %}
	{
		{{- '{' ~ segment.fromVertex.x ~ ', ' ~ segment.fromVertex.y ~ ', ' ~ segment.fromVertex.z ~ ', ' ~ segment.fromVertex.parallax ~ '}, ' -}}
		{{- '{' ~ segment.toVertex.x ~ ', ' ~ segment.toVertex.y ~ ', ' ~ segment.toVertex.z ~ ', ' ~ segment.toVertex.parallax ~ '}' -}}
	},
	{%- endfor %}

	// limiter
	{{ '{{0, 0, 0, 0}, {0, 0, 0, 0}},' }}
};

{% endif -%}

{{ wireframe.type }}ROMSpec {{ wireframeName }}WireframeSpec =
{
	{
		// class allocator
		__TYPE({{ wireframe.type }}),

		// Displacement
		{{ '{' ~ wireframe.displacement.x ~ ', ' ~ wireframe.displacement.y ~ ', ' ~ wireframe.displacement.z ~ '}' }},
		
		// color
		{{ ['__COLOR_BLACK', '__COLOR_DARK_RED', '__COLOR_MEDIUM_RED', '__COLOR_BRIGHT_RED'][wireframe.color] }},

		// Transparency mode (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)
		__TRANSPARENCY_{{ wireframe.transparency | upper }},

		// Flag to render the wireframe in interlaced mode
		{{ wireframe.interlaced }},
	},

	{% if wireframe.type == 'Sphere' -%}
	// radius
	__PIXELS_TO_METERS({{ wireframe.radius }}),

	// draw center
	{{ wireframe.drawCenter }},
	{%- elseif wireframe.type == 'Mesh' -%}
	// segments
	(PixelVector (*)[2]){{ wireframeName }}WireframeSegments,
	{%- elseif wireframe.type == 'Asterisk' -%}
	// length
	{{ wireframe | length }},
	{%- endif %}
};

{% endfor -%}
{% endif %}

{#- PRINT COLLIDERS -#}
{%- if item.inGameType != '' and item.components.colliders | length -%}

{{- macros.sectionHeader('Colliders') ~ '\n\n' -}}

{%- set colliderNames = [] -%}
{%- for collider in item.components.colliders -%}
{%- set colliderName = sanitizedSpecName ~ 'Collider' ~ loop.index -%}
{%- set colliderNames = (colliderNames.push(colliderName), colliderNames) -%}

ColliderROMSpec {{ colliderName }}ColliderSpec = 
{
	// Collider
	{
		// Allocator
		__TYPE({{ collider.type }}),

		// Component type
		kColliderComponent
	},

	// Size (x, y, z)
	{{ '{' ~ collider.pixelSize.x ~ ', ' ~ collider.pixelSize.y ~ ', ' ~ collider.pixelSize.z ~ '}' }},

	// Displacement (x, y, z, p)
	{{ '{' ~ collider.displacement.x ~ ', ' ~ collider.displacement.y ~ ', ' ~ collider.displacement.z ~ ', ' ~ collider.displacement.parallax ~ '}' }},

	// Rotation (x, y, z)
	{__F_TO_FIX7_9({{ collider.rotation.x }}), __F_TO_FIX7_9({{ collider.rotation.y }}), __F_TO_FIX7_9({{ collider.rotation.z }})},

	// Scale (x, y, z)
	{__F_TO_FIX7_9({{ collider.scale.x }}), __F_TO_FIX7_9({{ collider.scale.y }}), __F_TO_FIX7_9({{ collider.scale.z }})},

	// If true this collider checks for collisions against other colliders
	{{ collider.checkForCollisions }},

	// Layers in which I live
	{%- if collider.layers | length > 0 %}
	kLayer
		{%- for layerId in collider.layers %}
			{{- project.items.ColliderLayers.project.layers[layerId] | sanitizeSpecName -}}
			{%- if not loop.last -%}
				{{- " | kLayer" -}}
			{%- endif -%}
		{%- endfor -%},
	{%- else %}
	kLayerNone,
	{%- endif %}

	// Layers to ignore when checking for collisions
	{%- if collider.layersToCheck | length > 0 %}
	kLayerAll & ~(kLayer
		{%- for layerId in collider.layersToCheck %}
			{{- project.items.ColliderLayers.project.layers[layerId] | sanitizeSpecName -}}
			{%- if not loop.last -%}
				{{- " | kLayer" -}}
			{%- endif -%}
		{%- endfor -%}),
	{%- else %}
	kLayerAll,
	{%- endif %}
},
{% endfor %}
{% endif -%}

{{- macros.sectionHeader('Actor') -}}

{#- PRINT PHYSICAL PROPERTIES -#}
{%- if item.physics.enabled %}

BodyROMSpec {{ sanitizedSpecName }}BodySpecSpec =
{
	// mass
	__F_TO_FIX10_6({{ item.physics.mass }}),

	// friction
	__F_TO_FIX10_6({{ item.physics.friction }}),

	// bounciness
	__F_TO_FIX10_6({{ item.physics.bounciness }}),

	// maximum velocity
	{
		__I_TO_FIXED({{ item.physics.maximumVelocity.x }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.y }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.z }}),
	},

	// maximum speed
	__I_TO_FIXED({{ item.physics.maximumSpeed }})
};
{%- endif %}

{#- PRINT CHILDREN -#}
{%- if item.components.children | length %}

PositionedActorROMSpec {{ sanitizedSpecName }}Children[] =
{
	{%- for child in item.components.children -%}
	{%- set childActor = project.items.Actor[child.itemId] -%}
	{%- if childActor is defined %}
	{&{{ childActor._fileUri | basename(false) | sanitizeSpecName }}ActorSpec, { {{ child.onScreenPosition.x }}, {{ child.onScreenPosition.y }}, {{ child.onScreenPosition.z }} }, { {{ child.onScreenRotation.x }}, {{ child.onScreenRotation.y }}, {{ child.onScreenRotation.z }} }, { {{ child.onScreenScale.x }}, {{ child.onScreenScale.y }}, {{ child.onScreenScale.z }} }, 0, {% if child.name != '' %}"{{ child.name }}"{% else %}NULL{% endif %}, NULL, {% if child.extraInfo != '' %}(void*)"{{ child.extraInfo }}"{% else %}NULL{% endif %}, {{ child.loadRegardlessOfPosition }}},
	{%- endif %}
	{%- endfor %}
	{NULL, {0, 0, 0}, {0, 0, 0}, {1, 1, 1},  0, NULL, NULL, NULL, false},
};
{%- endif %}

ComponentSpec* const {{ sanitizedSpecName }}ComponentSpecs[] = 
{
	{% for spriteName in spriteNames -%}
	(ComponentSpec*)&{{ spriteName }}SpriteSpec,
	{% endfor -%}
	{% for wireframeName in wireframeNames -%}
	(ComponentSpec*)&{{ wireframeName }}WireframeSpec,
	{% endfor -%}
	{% for colliderName in colliderNames -%}
	(ComponentSpec*)&{{ colliderName }}ColliderSpec,
	{% endfor -%}
	{% for mutator in item.components.mutators -%}
	(ComponentSpec*)&{{ mutator.name }},
	{% endfor -%}
	NULL
};

{# PRINT ACTOR SPEC -#}
{{ actorClass }}ROMSpec {{ sanitizedSpecName }}ActorSpec =
{
	// Class allocator
	__TYPE({{ actorClass }}),

	// Component specs
	(ComponentSpec**){{ sanitizedSpecName }}ComponentSpecs,

	// Children specs
	{%- if item.components.children | length %}
	(struct PositionedActor*){{ sanitizedSpecName }}Children,
	{%- else %}
	NULL,
	{%- endif %}

	// Extra info
	{%- if item.extraProperties.extraInfo != '' %}
	(void*)"{{ item.extraProperties.extraInfo }}",
	{%- else %}
	NULL,
	{%- endif %}

	// Size
	// If 0, it is computed from the visual components if any
	{{ '{' ~ item.extraProperties.pixelSize.x ~ ', ' ~ item.extraProperties.pixelSize.y ~ ', ' ~ item.extraProperties.pixelSize.z ~ '}' }},

	// Actor's in-game type
	{%- if item.inGameType == 'None' %}
	kTypeNone,
	{%- else %}
	kType{{ project.items.InGameTypes.project.types[item.inGameType] | sanitizeSpecName }},
	{%- endif %}

	// Animation to play automatically
	{%- if isAnimated and item.components.animations[item.animations.default].name != '' %}
	"{{ item.components.animations[item.animations.default].name | sanitizeSpecName }}"
	{%- elseif isAnimated %} 
	"{{ item.animations.default + 1 }}"
	{%- else %}
	NULL
	{%- endif %}
};
