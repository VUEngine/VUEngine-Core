{%- import 'templates/partials/macros.njk' as macros -%}

{%- set sanitizedSpecName = itemUri | basename(false) | sanitizeSpecName -%}
{%- set notesLookup = {'B9': 0,'A#9': 0,'A9': 0,'G#9': 0,'G9': 0,'F#9': 0,'F9': 0,'E9': 0,'D#9': 0,'D9': 0,'C#9': 0,'C9': 2029,'B8': 2028,'A#8': 2027,'A8': 2026,'G#8': 2024,'G8': 2023,'F#8': 2022,'F8': 2020,'E8': 2018,'D#8': 2017,'D8': 2015,'C#8': 2013,'C8': 2011,'B7': 2008,'A#7': 2006,'A7': 2004,'G#7': 2001,'G7': 1998,'F#7': 1995,'F7': 1992,'E7': 1989,'D#7': 1985,'D7': 1981,'C#7': 1978,'C7': 1973,'B6': 1969,'A#6': 1964,'A6': 1960,'G#6': 1954,'G6': 1948,'F#6': 1942,'F6': 1936,'E6': 1930,'D#6': 1922,'D6': 1915,'C#6': 1907,'C6': 1899,'B5': 1890,'A#5': 1880,'A5': 1870,'G#5': 1860,'G5': 1849,'F#5': 1837,'F5': 1824,'E5': 1811,'D#5': 1797,'D5': 1782,'C#5': 1766,'C5': 1749,'B4': 1732,'A#4': 1713,'A4': 1693,'G#4': 1672,'G4': 1650,'F#4': 1625,'F4': 1600,'E4': 1574,'D#4': 1547,'D4': 1516,'C#4': 1484,'C4': 1451,'B3': 1415,'A#3': 1378,'A3': 1338,'G#3': 1296,'G3': 1251,'F#3': 1203,'F3': 1153,'E3': 1100,'D#3': 1044,'D3': 984,'C#3': 921,'C3': 854,'B2': 783,'A#2': 707,'A2': 628,'G#2': 543,'G2': 454,'F#2': 359,'F2': 258,'E2': 152,'D#2': 39,'D2': 0,'C#2': 0,'C2': 0,'B1': 0,'A#1': 0,'A1': 0,'G#1': 0,'G1': 0,'F#1': 0,'F1': 0,'E1': 0,'D#1': 0,'D1': 0,'C#1': 0,'C1': 0,'B0': 0,'A#0': 0,'A0': 0,'G#0': 0,'G0': 0,'F#0': 0,'F0': 0,'E0': 0,'D#0': 0,'D0': 0,'C#0': 0,'C0': 0} -%}
{%- set noteResolution = 16 -%}
{%- set sequencerResolution = 4 -%}
{%- set subNoteResolution = 50 -%}
{%- set barNoteResolution = noteResolution * subNoteResolution -%}

{%- set waveforms = {} -%}
{%- set modulationData = {} -%}

{%- set loopPoint = 0 -%}
{%- if item.loop and not (isSoundEditorPreview and playRangeStart is defined) -%}
	{%- set loopPoint = item.loopPoint -%}
{%- endif -%}

{%- set soloTrack = -1 -%}
{%- if isSoundEditorPreview -%}
	{%- for trackSetting in trackSettings -%}
		{%- if trackSetting.solo -%}
			{%- set soloTrack = loop.index0 -%}
		{%- endif -%}
	{%- endfor -%}
{%- endif -%}

{%- macro instrumentIsUsed(instrumentId) -%}
	{%- set result = false -%}
	{%- for track in item.tracks -%}
		{%- if track.instrument == instrumentId -%}
			{%- set result = true -%}
		{%- endif -%}
		{%- for patternId in track.sequence | values -%}
			{%- set pattern = item.patterns[patternId] -%}
			{%- if pattern -%}
				{%- for step in pattern.events | values -%}
					{%- if step.instrument is defined and step.instrument == instrumentId -%}
						{%- set result = true -%}
					{%- endif -%}
				{%- endfor -%}
			{%- endif -%}
		{%- endfor -%}
	{%- endfor -%}
	{{ result }}
{%- endmacro -%}

{%- macro SxINT(channelEnabled, interval) -%}
	{{ hexFromBitsArray([
		[channelEnabled, 1],
		[NULL, 1],
		[interval.enabled, 1],
		[interval.value, 5]
	]) }}
{%- endmacro -%}

{%- macro SxLRV(volume) -%}
	{{ hexFromBitsArray([
		[volume.left, 4],
		[volume.right, 4]
	]) }}
{%- endmacro -%}

{%- macro SxFQ(frequency) -%}
	{{ frequency | intToHex(4) }}
{%- endmacro -%}

{%- macro SxEV0(envelope) -%}
	{{ hexFromBitsArray([
		[envelope.initialValue, 4],
		[envelope.direction, 1],
		[envelope.stepTime, 3]
	]) }}
{%- endmacro -%}

{%- macro SxEV1(envelope, sweepMod, tap, type) -%}
	{%- if (type == 'noise') -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[tap, 3],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- else -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[sweepMod.enabled, 1],
			[sweepMod.repeat, 1],
			[sweepMod.function, 1],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- endif -%}
{%- endmacro -%}

{%- macro SxRAM(waveform, type) -%}
	{%- if (type !== 'noise') -%}
		{%- set checksum = waveform | crc32 -%}
		&{{ sanitizedSpecName }}Waveform{{ waveforms[checksum] }}
	{%- else -%}
		NULL
	{%- endif -%}
{%- endmacro -%}

{%- macro S5SWP(sweepMod) -%}
	{{ hexFromBitsArray([
		[sweepMod.frequency, 1],
		[sweepMod.interval, 3],
		[sweepMod.direction, 1],
		[sweepMod.shift, 3]
	]) }}
{%- endmacro -%}

{%- macro S5MOD(modData, sweepMod, type) -%}
	{%- if (type == 'sweepMod' and sweepMod.function) -%}
		{%- set checksum = modData | crc32 -%}
		{{ sanitizedSpecName }}ModulationData{{ modulationData[checksum] }}
	{%- else -%}
		NULL
	{%- endif -%}
{%- endmacro -%}

{%- macro printValueList(values, columnWidth=16) -%}
	{% set count = 0 -%}
	{%- for value in values -%}
		{{- value -}}{{- ', ' -}}
		{% set count = count + 1 -%}
		{%- if count == columnWidth and not loop.last -%}
			{{- '\n\t' -}}
			{% set count = 0 -%}
		{%- endif -%}
	{%- endfor %}
{%- endmacro -%}

{% include('templates/partials/fileHeader/fileHeader.c.njk') %}

{{ macros.sectionHeader('Includes') }}

#include <Sound.h>
#include <SoundTrack.h>

{{ macros.sectionHeader('Declarations') }}

{#- Render waveforms for all instruments -#}
{%- set isFirstWaveform = true -%}
{%- for instrumentId in item.instruments | keys -%}
{%- set instrument = item.instruments[instrumentId] -%}
{%- set checksum = instrument.waveform | crc32 -%}
{%- set isUsed = instrumentIsUsed(instrumentId) -%}
{%- if isUsed == 'true' and not waveforms[checksum] is defined -%}
{%- set waveformsKey = waveforms | length + 1 -%}
{%- set waveforms = waveforms | setProperty(checksum | string, waveformsKey) -%}

{%- if isFirstWaveform %}

// Waveforms
{%- endif %}

const WaveformData {{ sanitizedSpecName }}Waveform{{ waveformsKey }} =
{
	// Data
	{
		{% for value in instrument.waveform -%}
			{{- (value ~ '') -}}
			{%- if not loop.last -%}{{ ', ' }}{%- endif -%}
		{%- endfor %}
	},

	// Checksum
	{{ checksum }}
};
{%- set isFirstWaveform = false -%}
{%- endif -%}
{%- endfor -%}

{#- Render modulation data for all instruments -#}
{%- set isFirstModulationData = true -%}
{%- for instrument in item.instruments | values -%}
{%- set checksum = instrument.modulationData | crc32 | string -%}
{%- if not modulationData[checksum] is defined -%}
{%- set modulationDataKey = modulationData | length + 1 -%}
{%- set modulationData = modulationData | setProperty(checksum, modulationDataKey) -%}

{%- if isFirstModulationData %}

// Modulation Data
{%- endif %}

const int8 {{ sanitizedSpecName }}ModulationData{{ modulationDataKey }}[] =
{
	{% for value in instrument.modulationData -%}
		{{- (value ~ '') ~ ', ' -}} 
	{%- endfor %}
};
{%- set isFirstModulationData = false -%}
{%- endif -%}
{%- endfor -%}

{#- Render all tracks -#}
{%- for track in item.tracks -%}
{%- if track.sequence | length and not (isSoundEditorPreview and (trackSettings[loop.loop0].muted or (soloTrack > -1 and soloTrack !== loop.index0))) -%}

{#- Initial configuration -#}
{%- set initialInstrument = item.instruments[track.instrument] -%}
{%- set valuesSxINT = [SxINT(true, initialInstrument.interval)] -%}
{%- set valuesSxLRV = ['0x00'] -%} {#- Explicit silent note. Initial instrument's volume is set on the first event. -#}
{%- set valuesSxEV0 = [SxEV0(initialInstrument.envelope)] -%}
{%- set valuesSxEV1 = [SxEV1(initialInstrument.envelope, initialInstrument.sweepMod, initialInstrument.tap, track.type)] -%}
{%- set valuesSxFQ = ['0x0000'] -%}
{%- set valuesSxRAM = [SxRAM(initialInstrument.waveform, track.type)] -%}
{%- set valuesSxSWP = [S5SWP(initialInstrument.sweepMod)] -%}
{%- set valuesSxMOD = [S5MOD(initialInstrument.modulationData, initialInstrument.sweepMod, track.type)] -%}

{%- set keyframes = [{ 
	duration: 0,
	flags: ['kSoundTrackEventStart'] 
}] -%}
{#- 
	Compute all register values and keyframes. We do this in a single loop because:
	a) it's cleaner to define handling for the different events in a single place
	b) registers can contain values from multiple logical places, e.g. EV1
	c) we have to keep track of previous state, because end user effects allow to edit individual values, 
	   e.g. envelope.enabled, while the spec wants the whole register values
-#}
{%- set loopKeyframe = 0 -%}
{%- set prevNoteStep = 0 -%}
{%- for step in range(0, item.size * barNoteResolution / sequencerResolution) -%}
	{#- Does a pattern start at the current step? -#}
	{%- if track.sequence[step / barNoteResolution * sequencerResolution] is defined -%}	
		{%- set pattern = item.patterns[track.sequence[step / barNoteResolution * sequencerResolution]] -%}
		{%- set patternStartStep = step -%}
	{%- endif -%}

	{#- Is there an event for the current step in the current pattern? -#}
	{%- if pattern is defined and pattern.events[step - patternStartStep] is defined -%}
		{%- set event = pattern.events[step - patternStartStep] -%}
		{%- set flags = [] -%}

		{%- if event['note'] is defined -%}
			{#- "PLAY NOTE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxFQ') -}}
			{{- macros.append(valuesSxFQ, SxFQ(notesLookup[event['note']])) -}}
		{%- endif -%}

		{%- if event['volume'] is defined -%}
			{#- "VOLUME CHANGE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, event['volume'] | intToHex(2)) -}}
		{%- endif -%}

		{%- if event['instrument'] is defined -%}
			{#- "INSTRUMENT CHANGE" EVENT -#}
			{%- set newInstrumentId = event['instrument'] -%}
			{%- set newInstrument = item.instruments[newInstrumentId] -%}
			{{- macros.append(flags, 'kSoundTrackEventSxINT') -}}
			{{- macros.append(valuesSxINT, SxINT(true, newInstrument.interval)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, SxLRV(newInstrument.volume)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV0') -}}
			{{- macros.append(valuesSxEV0, SxEV0(newInstrument.envelope)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV1') -}}
			{{- macros.append(valuesSxEV1, SxEV1(newInstrument.envelope, newInstrument.sweepMod, newInstrument.tap, track.type)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxRAM') -}}
			{{- macros.append(valuesSxRAM, SxRAM(newInstrument.waveform, track.type)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxSWP') -}}
			{{- macros.append(valuesSxSWP, S5SWP(newInstrument.sweepMod)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxMOD') -}}
			{{- macros.append(valuesSxMOD, S5MOD(newInstrument.modulationData,  newInstrument.sweepMod, track.type)) -}}
		{%- endif -%}

		{#- TODO: add other event types -#}

		{#- Set initial volume on the very first event (after the start event) -#}
		{#- Skip if the event sets the volume explicitly -#}
		{%- if (keyframes | length) == 1 and not 'kSoundTrackEventSxLRV' in flags -%}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, SxLRV(initialInstrument.volume)) -}}
		{%- endif -%}

		{#- Ensure events for sweep/mod and noise are played on the respective channels -#}
		{{- macros.append(flags, 'kSoundTrackEventSweepMod', track.type == 'sweepMod') -}}
		{{- macros.append(flags, 'kSoundTrackEventNoise', track.type == 'noise') -}}

		{#- Now that it is known, set duration on the previous event -#}
		{%- set keyframe = { 
			duration: step - prevNoteStep,
			flags: (keyframes | last).flags 
		} -%}
		{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}

		{#- Finally, append to list of keyframes -#}
		{%- set keyframe = { duration: 0, flags: flags } -%}
		{{- macros.append(keyframes, keyframe) -}}

		{#- Take note of this note's step to compute its duration later -#}
		{%- set prevNoteStep = step -%}
	{%- endif -%}

	{#- Find loop back keyframe -#}
	{%- if loopPoint > 0 and step == loopPoint * barNoteResolution / sequencerResolution -%}
		{#- Add "dummy" keyframe to loop back to if there is none at this step -#}
		{%- if prevNoteStep !==  step -%}

			{#- Set duration on the previous event -#}
			{%- set keyframe = { 
				duration: step - prevNoteStep,
				flags: (keyframes | last).flags 
			} -%}
			{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}

			{#- Add empty keyframe -#}
			{%- set keyframe = { duration: 0, flags: [] } -%}
			{{- macros.append(keyframes, keyframe) -}}

			{%- set prevNoteStep = step -%}
		{%- endif -%}

		{%- set loopKeyframe = (keyframes | length) - 1 -%}
	{%- endif -%}

	{%- if loop.last -%}
		{#- Set duration of the last event -#}
		{%- set keyframe = { 
			duration: step - prevNoteStep + 1,
			flags: (keyframes | last).flags 
		} -%}
		{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}
	{%- endif -%}
{%- endfor -%}

{#- Trim events for range play in editor preview -#}
{%- if isSoundEditorPreview and (playRangeStart is defined or playRangeEnd is defined) -%}
	{#- TODO -#}
{%- endif %}

// Track {{ loop.index }}

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxINT[] =
{
	{{ printValueList(valuesSxINT, 22) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxLRV[] =
{
	{{ printValueList(valuesSxLRV, 22) }}
};

const uint16 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxFQ[] =
{
	{{ printValueList(valuesSxFQ, 16) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV0[] =
{
	{{ printValueList(valuesSxEV0, 22) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV1[] =
{
	{{ printValueList(valuesSxEV1, 22) }}
};

const WaveformData* const {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxRAM[] =
{
	{{ printValueList(valuesSxRAM, 4) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxSWP[] =
{
	{{ printValueList(valuesSxSWP, 22) }}
};

const int8* const {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxMOD[] =
{
	{{ printValueList(valuesSxMOD, 4) }}
};

const SoundTrackKeyframe {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}Keyframes[] =
{
	{% for keyframe in keyframes -%}
	{{-'{'}}{{ keyframe.duration }}, {% if keyframe.flags | length == 0 %}0{% else %}{{ keyframe.flags | join(' | ') }}{% endif %}{{'},'}}
	{% endfor -%}
	{0, kSoundTrackEventEnd}, 
};

SoundTrackROMSpec {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }} =
{
	// kTrackNative, kTrackPCM
	kTrackNative,

	// Skip if no sound source available?
	{{ track.allowSkip }},

	// Total number of samples (0 if not PCM)
	0,

	// Loop back point (cursor)
	{{ loopKeyframe }},

	// Keyframes that define the track
	(SoundTrackKeyframe*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}Keyframes,

	// SxINT values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxINT,

	// SxLRV values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxLRV,

	// SxFQH and SxFQL values
	(uint16*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxFQ,

	// SxEV0 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV0,

	// SxEV1 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV1,

	// SxRAM pointers
	(WaveformData**){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxRAM,

	// SxSWP values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxSWP,

	// SxMOD pointers
	(int8**){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxMOD,
};
{%- endif %}
{%- endfor %}

{{ macros.sectionHeader('Definitions') }}

SoundTrackROMSpec* const {{ sanitizedSpecName }}SoundTracks[] =
{
	{%- for track in item.tracks %}
	{%- if track.sequence | length and not (isSoundEditorPreview and (trackSettings[loop.loop0].muted or (soloTrack > -1 and soloTrack !== loop.index0))) %}
	&{{ sanitizedSpecName }}SoundTrack{{ loop.index0 }},
	{%- endif %}
	{%- endfor %}
	NULL
};

SoundROMSpec {{ sanitizedSpecName }}SoundSpec =
{
	// Name
	"{{ item.name }}",

	// Play in loop
	{{ item.loop }},

	// Tick duration in US
	{{ item.speed * 1000 / subNoteResolution }},

	// Tracks
	(SoundTrackSpec**){{ sanitizedSpecName }}SoundTracks,
};
