{%- import 'templates/partials/macros.njk' as macros -%}

{%- set sanitizedSpecName = itemUri | basename(false) | sanitizeSpecName -%}
{%- set notesLookup = [2028, 2027, 2026, 2024, 2023, 2022, 2020, 2018, 2017, 2015, 2013, 2011, 2008, 2006, 2004, 2001, 1998, 1995, 1992, 1989, 1985, 1981, 1978, 1973, 1969, 1964, 1960, 1954, 1948, 1942, 1936, 1930, 1922, 1915, 1907, 1899, 1890, 1880, 1870, 1860, 1849, 1837, 1824, 1811, 1797, 1782, 1766, 1749, 1732, 1713, 1693, 1672, 1650, 1625, 1600, 1574, 1547, 1516, 1484, 1451, 1415, 1378, 1338, 1296, 1251, 1203, 1153, 1100, 1044, 984, 921, 854, 783, 707, 628, 543, 454, 359, 258, 152, 39, 0, 0, 0] -%}
{%- set noteResolution = 16 -%}
{%- set subNoteResolution = 50 -%}
{%- set barNoteResolution = noteResolution * subNoteResolution -%}

{%- set loopPoint = item.loopPoint -%}
{%- if isSoundEditorPreview and playRangeStart is defined -%}
	{%- set loopPoint = 0 -%}
{%- endif -%}

{%- set soloChannel = -1 -%}
{%- for channel in item.channels -%}
	{%- if channel.solo -%}
		{%- set soloChannel = loop.index0 -%}
	{%- endif -%}
{%- endfor -%}

{%- macro SxINT(channelEnabled, interval) -%}
	{{ hexFromBitsArray([
		[channelEnabled, 1],
		[NULL, 1],
		[interval.enabled, 1],
		[interval.value, 5]
	]) }}
{%- endmacro -%}

{%- macro SxLRV(volume) -%}
	{{ hexFromBitsArray([
		[volume.left, 4],
		[volume.right, 4]
	]) }}
{%- endmacro -%}

{%- macro SxFQ(frequency) -%}
	{{ frequency | intToHex(4) }}
{%- endmacro -%}

{%- macro SxEV0(envelope) -%}
	{{ hexFromBitsArray([
		[envelope.initialValue, 4],
		[envelope.direction, 1],
		[envelope.stepTime, 3]
	]) }}
{%- endmacro -%}

{%- macro SxEV1(envelope, sweepMod, tap, type) -%}
	{%- if (type == 'noise') -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[tap, 3],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- else -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[sweepMod.enabled, 1],
			[sweepMod.repeat, 1],
			[sweepMod.function, 1],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- endif -%}
{%- endmacro -%}

{%- macro SxRAM(waveformId, type) -%}
	{%- set waveform = project.items.WaveForm[waveformId] -%}
	{%- if (type == 'noise' or not waveform) -%}
		NULL
	{%- else -%}
		{{waveform._fileUri | basename(false) | sanitizeSpecName}}WaveForm
	{%- endif -%}
{%- endmacro -%}

{%- macro S5SWP(sweepMod) -%}
	{{ hexFromBitsArray([
		[sweepMod.frequency, 1],
		[sweepMod.interval, 3],
		[sweepMod.direction, 1],
		[sweepMod.shift, 3]
	]) }}
{%- endmacro -%}

{%- macro S5MOD(instrumentId, sweepMod, type) -%}
	{%- if (type == 'sweepMod' and sweepMod.function) -%}
		{{ sanitizedSpecName }}ModulationData{{ instrumentId }}
	{%- else -%}
		NULL
	{%- endif -%}
{%- endmacro -%}

{%- macro printValueList(values, columnWidth=16) -%}
	{% set count = 0 -%}
	{%- for value in values -%}
		{{- value -}}{{- ', ' -}}
		{% set count = count + 1 -%}
		{%- if count == columnWidth and not loop.last -%}
			{{- '\n\t' -}}
			{% set count = 0 -%}
		{%- endif -%}
	{%- endfor %}
{%- endmacro -%}

{% include('templates/partials/fileHeader/fileHeader.c.njk') %}

{{ macros.sectionHeader('Includes') }}

#include <Sound.h>
#include <SoundTrack.h>
#include <WaveForms.h>

{{ macros.sectionHeader('Declarations') }}

{#- Render modulation data for all sweep/mod instruments -#}
{%- set isFirstModulationData = true -%}
{%- for instrument in item.instruments -%}
{%- if instrument.type == 'sweepMod' and instrument.sweepMod.function %}

{%- if isFirstModulationData %}

// Modulation Data
{%- endif %}

const int8 {{ sanitizedSpecName }}ModulationData{{ loop.index0 }}[] =
{
	{% for value in instrument.modulationData -%}
	{{- ((value - 1) ~ '') | padStart(3, ' ') ~ ', ' -}} 
	{%- if loop.index % 16 == 0 and not loop.last -%}
		{{ "\n	" }}
	{%- endif -%}
	{%- endfor %}
};
{%- set isFirstModulationData = false -%}
{%- endif -%}
{%- endfor -%}

{#- Render all channels -#}
{%- for channel in item.channels -%}
{%- if channel.sequence | length and not (isSoundEditorPreview and (channel.muted or (soloChannel > -1 and soloChannel != loop.index0))) -%}

{#- Initial configuration -#}
{%- set initialInstrument = item.instruments[channel.instrument] -%}
{%- set valuesSxINT = [SxINT(true, initialInstrument.interval)] -%}
{%- set valuesSxLRV = ['0x00'] -%} {#- Explicit silent note. Initial instrument's volume is set on the first event. -#}
{%- set valuesSxEV0 = [SxEV0(initialInstrument.envelope)] -%}
{%- set valuesSxEV1 = [SxEV1(initialInstrument.envelope, initialInstrument.sweepMod, initialInstrument.tap, initialInstrument.type)] -%}
{%- set valuesSxFQ = ['0x0000'] -%}
{%- set valuesSxRAM = [SxRAM(initialInstrument.waveform, initialInstrument.type)] -%}
{%- set valuesSxSWP = [S5SWP(initialInstrument.sweepMod)] -%}
{%- set valuesSxMOD = [S5MOD(channel.instrument, initialInstrument.sweepMod, initialInstrument.type)] -%}

{%- set keyframes = [{ 
	duration: 0,
	flags: ['kSoundTrackEventStart'] 
}] -%}
{#- 
	Compute all register values and keyframes. We do this in a single loop because:
	a) it's cleaner to define handling for the different events in a single place
	b) registers can contain values from multiple logical places, e.g. EV1
	c) we have to keep track of previous state, because end user effects allow to edit individual values, 
	   e.g. envelope.enabled, while the spec wants the whole register values
-#}
{%- set loopKeyframe = 0 -%}
{%- set prevNoteStep = 0 -%}
{%- for step in range(0, item.size * barNoteResolution) -%}
	{#- Does a pattern start at the current step? -#}
	{%- if channel.sequence[step / barNoteResolution] is defined -%}	
		{%- set pattern = item.patterns[channel.sequence[step / barNoteResolution]] -%}
		{%- set patternStartStep = step -%}
	{%- endif -%}

	{#- Is there an event for the current step in the current pattern? -#}
	{%- if pattern is defined and pattern.events[step - patternStartStep] is defined -%}
		{%- set event = pattern.events[step - patternStartStep] -%}
		{%- set flags = [] -%}

		{%- if event['note'] is defined -%}
			{#- "PLAY NOTE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxFQ') -}}
			{{- macros.append(valuesSxFQ, SxFQ(notesLookup[event['note']])) -}}
		{%- endif -%}

		{%- if event['volume'] is defined -%}
			{#- "VOLUME CHANGE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, event['volume'] | intToHex(2)) -}}
		{%- endif -%}

		{%- if event['instrument'] is defined -%}
			{#- "INSTRUMENT CHANGE" EVENT -#}
			{%- set newInstrumentId = event['instrument'] -%}
			{%- set newInstrument = item.instruments[newInstrumentId] -%}
			{{- macros.append(flags, 'kSoundTrackEventSxINT') -}}
			{{- macros.append(valuesSxINT, SxINT(true, newInstrument.interval)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, SxLRV(newInstrument.volume)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV0') -}}
			{{- macros.append(valuesSxEV0, SxEV0(newInstrument.envelope)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV1') -}}
			{{- macros.append(valuesSxEV1, SxEV1(newInstrument.envelope, newInstrument.sweepMod, newInstrument.tap, newInstrument.type)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxRAM') -}}
			{{- macros.append(valuesSxRAM, SxRAM(newInstrument.waveform, newInstrument.type)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxSWP') -}}
			{{- macros.append(valuesSxSWP, S5SWP(newInstrument.sweepMod)) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxMOD') -}}
			{{- macros.append(valuesSxMOD, S5MOD(newInstrumentId,  newInstrument.sweepMod, newInstrument.type)) -}}
		{%- endif -%}

		{#- TODO: add other event types -#}

		{#- Set initial volume on the very first event (after the start event) -#}
		{#- Skip if the event sets the volume explicitly -#}
		{%- if (keyframes | length) == 1 and not 'kSoundTrackEventSxLRV' in flags -%}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, SxLRV(initialInstrument.volume)) -}}
		{%- endif -%}

		{#- Ensure events for sweep/mod and noise are played on the respective channels -#}
		{{- macros.append(flags, 'kSoundTrackEventSweepMod', channel.type == 'sweepMod') -}}
		{{- macros.append(flags, 'kSoundTrackEventNoise', channel.type == 'noise') -}}

		{#- Now that it is known, set duration on the previous event -#}
		{%- set keyframe = { 
			duration: step - prevNoteStep,
			flags: (keyframes | last).flags 
		} -%}
		{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}

		{#- Finally, append to list of keyframes -#}
		{%- set keyframe = { duration: 0, flags: flags } -%}
		{{- macros.append(keyframes, keyframe) -}}

		{#- Take note of this note's step to compute its duration later -#}
		{%- set prevNoteStep = step -%}
	{%- endif -%}

	{#- Find loop back keyframe -#}
	{%- if loopPoint > 0 and step == loopPoint * barNoteResolution -%}
		{#- Add "dummy" keyframe to loop back to if there is none at this step -#}
		{%- if prevNoteStep != step -%}

			{#- Set duration on the previous event -#}
			{%- set keyframe = { 
				duration: step - prevNoteStep,
				flags: (keyframes | last).flags 
			} -%}
			{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}

			{#- Add empty keyframe -#}
			{%- set keyframe = { duration: 0, flags: [] } -%}
			{{- macros.append(keyframes, keyframe) -}}

			{%- set prevNoteStep = step -%}
		{%- endif -%}

		{%- set loopKeyframe = (keyframes | length) - 1 -%}
	{%- endif -%}

	{%- if loop.last -%}
		{#- Set duration of the last event -#}
		{%- set keyframe = { 
			duration: step - prevNoteStep + 1,
			flags: (keyframes | last).flags 
		} -%}
		{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}
	{%- endif -%}
{%- endfor -%}

{#- Trim events for range play in editor preview -#}
{%- if isSoundEditorPreview and (playRangeStart is defined or playRangeEnd is defined) -%}
	{#- TODO -#}
{%- endif %}


// Channel {{ loop.index }}

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxINT[] =
{
	{{ printValueList(valuesSxINT, 22) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxLRV[] =
{
	{{ printValueList(valuesSxLRV, 22) }}
};

const uint16 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxFQ[] =
{
	{{ printValueList(valuesSxFQ, 16) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV0[] =
{
	{{ printValueList(valuesSxEV0, 22) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV1[] =
{
	{{ printValueList(valuesSxEV1, 22) }}
};

const int8* const {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxRAM[] =
{
	{{ printValueList(valuesSxRAM, 4) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxSWP[] =
{
	{{ printValueList(valuesSxSWP, 22) }}
};

const int8* const {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxMOD[] =
{
	{{ printValueList(valuesSxMOD, 4) }}
};

const SoundTrackKeyframe {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}Keyframes[] =
{
	{% for keyframe in keyframes -%}
	{{-'{'}}{{ keyframe.duration }}, {% if keyframe.flags | length == 0 %}0{% else %}{{ keyframe.flags | join(' | ') }}{% endif %}{{'},'}}
	{% endfor -%}
	{0, kSoundTrackEventEnd}, 
};

SoundTrackROMSpec {{ sanitizedSpecName }}SoundTrack{{ loop.index0 }} =
{
	// kTrackNative, kTrackPCM
	kTrackNative,

	// Skip if no sound source available?
	{{ channel.allowSkip }},

	// Total number of samples (0 if not PCM)
	0,

	// Loop back point (cursor)
	{{ loopKeyframe }},

	// Keyframes that define the track
	(SoundTrackKeyframe*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}Keyframes,

	// SxINT values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxINT,

	// SxLRV values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxLRV,

	// SxFQH and SxFQL values
	(uint16*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxFQ,

	// SxEV0 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV0,

	// SxEV1 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxEV1,

	// SxRAM pointers
	(int8**){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxRAM,

	// SxSWP values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxSWP,

	// SxMOD pointers
	(int8**){{ sanitizedSpecName }}SoundTrack{{ loop.index0 }}SxMOD,
};
{%- endif %}
{%- endfor %}

{{ macros.sectionHeader('Definitions') }}

SoundTrackROMSpec* const {{ sanitizedSpecName }}SoundTracks[] =
{
	{%- for channel in item.channels %}
	{%- if channel.sequence | length and not (isSoundEditorPreview and (channel.muted or (soloChannel > -1 and soloChannel != loop.index0))) %}
	&{{ sanitizedSpecName }}SoundTrack{{ loop.index0 }},
	{%- endif %}
	{%- endfor %}
	NULL
};

SoundROMSpec {{ sanitizedSpecName }}SoundSpec =
{
	// Name
	"{{ item.name }}",

	// Play in loop
	{{ item.loop }},

	// Tick duration in US
	{{ item.speed * 1000 / subNoteResolution }},

	// Tracks
	(SoundTrackSpec**){{ sanitizedSpecName }}SoundTracks,
};
