{%- set sanitizedSpecName = itemUri | basename(false) | sanitizeSpecName -%}
{%- set notesLookup = [2028, 2027, 2026, 2024, 2023, 2022, 2020, 2018, 2017, 2015, 2013, 2011, 2008, 2006, 2004, 2001, 1998, 1995, 1992, 1989, 1985, 1981, 1978, 1973, 1969, 1964, 1960, 1954, 1948, 1942, 1936, 1930, 1922, 1915, 1907, 1899, 1890, 1880, 1870, 1860, 1849, 1837, 1824, 1811, 1797, 1782, 1766, 1749, 1732, 1713, 1693, 1672, 1650, 1625, 1600, 1574, 1547, 1516, 1484, 1451, 1415, 1378, 1338, 1296, 1251, 1203, 1153, 1100, 1044, 984, 921, 854, 783, 707, 628, 543, 454, 359, 258, 152, 39, 0, 0, 0] -%}
{%- set tickDurationScalingFactor = 50 -%}

{%- import 'templates/partials/macros.njk' as macros -%}

{%- macro SxINT(channelEnabled, interval) -%}
	{{ hexFromBitsArray([
		[channelEnabled, 1],
		[NULL, 1],
		[interval.enabled, 1],
		[interval.value, 5]
	]) }}
{%- endmacro -%}

{%- macro SxLRV(volume) -%}
	{{ hexFromBitsArray([
		[volume.left, 4],
		[volume.right, 4]
	]) }}
{%- endmacro -%}

{%- macro SxFQ(frequency) -%}
	{{ frequency | intToHex(4) }}
{%- endmacro -%}

{%- macro SxEV0(envelope) -%}
	{{ hexFromBitsArray([
		[envelope.initialValue, 4],
		[envelope.direction, 1],
		[envelope.stepTime, 3]
	]) }}
{%- endmacro -%}

{%- macro SxEV1(envelope, sweepMod, tap, type) -%}
	{%- if (type == 'noise') -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[tap, 3],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- else -%}
		{{ hexFromBitsArray([
			[NULL, 1],
			[sweepMod.enabled, 1],
			[sweepMod.repeat, 1],
			[sweepMod.function, 1],
			[NULL, 2],
			[envelope.repeat, 1],
			[envelope.enabled, 1]
		]) }}
	{%- endif -%}
{%- endmacro -%}

{%- macro SxRAM(waveformId, type) -%}
	{%- set waveform = project.items.WaveForm[waveformId] -%}
	{%- if (type == 'noise' or not waveform) -%}
		NULL
	{%- else -%}
		{{waveform._fileUri | basename(false) | sanitizeSpecName}}WaveForm
	{%- endif -%}
{%- endmacro -%}

{%- macro S5SWP(sweepMod) -%}
	{{ hexFromBitsArray([
		[sweepMod.frequency, 1],
		[sweepMod.interval, 3],
		[sweepMod.direction, 1],
		[sweepMod.shift, 3]
	]) }}
{%- endmacro -%}

{%- macro S5MOD(instrumentId, sweepMod, type) -%}
	{%- if (type == 'sweepMod' and sweepMod.function) -%}
		{{ sanitizedSpecName }}ModulationData{{ instrumentId }}
	{%- else -%}
		NULL
	{%- endif -%}
{%- endmacro -%}

{%- macro printValueList(values, columnWidth=16) -%}
	{% set count = 0 -%}
	{%- for value in values -%}
		{{- value -}}{{- ', ' -}}
		{% set count = count + 1 -%}
		{%- if count == columnWidth and not loop.last -%}
			{{- '\n\t' -}}
			{% set count = 0 -%}
		{%- endif -%}
	{%- endfor %}
{%- endmacro -%}

{% include('templates/partials/fileHeader/fileHeader.c.njk') %}

{{ macros.sectionHeader('Includes') }}

#include <Sound.h>
#include <SoundTrack.h>
#include <WaveForms.h>

{{ macros.sectionHeader('Declarations') }}

{#- Render modulation data for all sweep/mod instruments -#}
{%- set isFirstModulationData = true -%}
{%- for instrument in item.instruments -%}
{%- if instrument.type == 'sweepMod' and instrument.sweepMod.function %}

{%- if isFirstModulationData %}

// Modulation Data
{%- endif %}

const int8 {{ sanitizedSpecName }}ModulationData{{ loop.index0 }}[] =
{
	{% for value in instrument.modulationData -%}
	{{- ((value - 1) ~ '') | padStart(3, ' ') ~ ', ' -}} 
	{%- if loop.index % 16 == 0 and not loop.last -%}
		{{ "\n	" }}
	{%- endif -%}
	{%- endfor %}
};
{%- set isFirstModulationData = false -%}
{%- endif -%}
{%- endfor -%}

{#- Render all channels -#}
{%- for channel in item.channels -%}
{%- if channel.sequence | length -%}

{#- Initial configuration -#}
{%- set initialInstrument = item.instruments[channel.instrument] -%}
{%- set valuesSxINT = [SxINT(true, initialInstrument.interval)] -%}
{%- set valuesSxLRV = [SxLRV(initialInstrument.volume)] -%}
{%- set valuesSxEV0 = [SxEV0(initialInstrument.envelope)] -%}
{%- set valuesSxEV1 = [SxEV1(initialInstrument.envelope, initialInstrument.sweepMod, initialInstrument.tap, initialInstrument.type)] -%}
{%- set valuesSxFQ = ['0x0000'] -%}
{%- set valuesSxRAM = [SxRAM(initialInstrument.waveform, initialInstrument.type)] -%}
{%- set valuesSxSWP = [S5SWP(initialInstrument.sweepMod)] -%}
{%- set valuesSxMOD = [S5MOD(channel.instrument, initialInstrument.sweepMod, initialInstrument.type)] -%}

{%- set keyframes = [{ 
	duration: 0,
	flags: ['kSoundTrackEventStart'] 
}] -%}
{#- 
	Compute all register values and keyframes. We do this in a single loop because:
	a) it's cleaner to define handling for the different events in a single place
	b) registers can contain values from multiple logical places, e.g. EV1
	c) we have to keep track of previous state, because end user effects allow to edit individual values, 
	   e.g. envelope.enabled, while the spec wants the whole register values
-#}
{%- for patternId in channel.sequence -%}
	{%- set pattern = channel.patterns[patternId] -%}
	{%- set patternLength = pattern.bar | replace | float * item.noteResolution -%}

	{#- Prepare events array -#}
	{%- set events = [] -%}
	{%- for tick, event in pattern.events -%}
		{{- macros.append(events, {tick: tick, event: event}) -}}
	{%- endfor -%}

	{#- Increase duration of last event when pattern is empty -#}
	{%- if not (events | length) and (keyframes | length) -%}	
		{%- set keyframe = { 
			duration: ((keyframes | last).duration | int) + patternLength,
			flags: (keyframes | last).flags 
		} -%}
		{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}
	{%- endif -%}

	{%- for event in events -%}
		{%- set flags = [] -%}

		{%- if event.event['note'] is defined -%}
			{#- "PLAY NOTE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxFQ') -}}
			{{- macros.append(valuesSxFQ, SxFQ(notesLookup[event.event['note']])) -}}
		{%- endif -%}

		{%- if event.event['volume'] is defined -%}
			{#- "VOLUME CHANGE" EVENT -#}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, event.event['volume'] | intToHex(2)) -}}
		{%- endif -%}

		{%- if event.event['instrument'] is defined -%}
			{#- "INSTRUMENT CHANGE" EVENT -#}
			{%- set newInstrumentId = event['instrument'] -%}
			{%- set newInstrument = item.instruments[newInstrumentId] -%}
			{{- macros.append(flags, 'kSoundTrackEventSxINT') -}}
			{{- macros.append(valuesSxINT, [SxINT(true, newInstrument.interval)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxLRV') -}}
			{{- macros.append(valuesSxLRV, [SxLRV(newInstrument.volume)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV0') -}}
			{{- macros.append(valuesSxEV0, [SxEV0(newInstrument.envelope)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxEV1') -}}
			{{- macros.append(valuesSxEV1, [SxEV1(newInstrument.envelope, newInstrument.sweepMod, newInstrument.tap, newInstrument.type)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxRAM') -}}
			{{- macros.append(valuesSxRAM, [SxRAM(newInstrument.waveform, newInstrument.type)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxSWP') -}}
			{{- macros.append(valuesSxSWP, [S5SWP(newInstrument.sweepMod)]) -}}
			{{- macros.append(flags, 'kSoundTrackEventSxMOD') -}}
			{{- macros.append(valuesSxMOD, [S5MOD(newInstrumentId,  newInstrument.sweepMod, newInstrument.type)]) -}}
		{%- endif -%}

		{#- TODO: add other event types -#}

		{#- Ensure events for sweep/mod and noise are played on the respective channels -#}
		{{- macros.append(flags, 'kSoundTrackEventSweepMod', channel.type == 'sweepMod') -}}
		{{- macros.append(flags, 'kSoundTrackEventNoise', channel.type == 'noise') -}}

		{#- Add first event's duration to previous pattern's last event duration -#}
		{%- if loop.first and (keyframes | length) -%}
			{%- set keyframe = { 
				duration: ((keyframes | last).duration | int) + (event.tick | int),
				flags: (keyframes | last).flags 
			} -%}
			{%- set keyframes = keyframes | setArrayIndex((keyframes | length) - 1, keyframe) -%}
		{%- endif -%}

		{#- Finally, append to list of keyframes -#}
		{#- Use duration from _next_ tick -#}
		{%- set duration = events[loop.index].tick - event.tick -%}
		{%- if loop.last -%}
			{#- ... or the current pattern's remaining number of ticks -#}
			{%- set duration = patternLength - event.tick -%}
		{%- endif -%}
		{%- set keyframe = { duration: duration, flags: flags } -%}
		{{- macros.append(keyframes, keyframe) -}}
	{%- endfor -%}
{%- endfor %}

// Channel {{ (channel.id + 1) }}

const uint8 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxINT[] =
{
	{{ printValueList(valuesSxINT) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxLRV[] =
{
	{{ printValueList(valuesSxLRV) }}
};

const uint16 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxFQ[] =
{
	{{ printValueList(valuesSxFQ, 12) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxEV0[] =
{
	{{ printValueList(valuesSxEV0) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxEV1[] =
{
	{{ printValueList(valuesSxEV1) }}
};

const int8* const {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxRAM[] =
{
	{{ printValueList(valuesSxRAM, 4) }}
};

const uint8 {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxSWP[] =
{
	{{ printValueList(valuesSxSWP) }}
};

const int8* const {{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxMOD[] =
{
	{{ printValueList(valuesSxMOD, 4) }}
};

const SoundTrackKeyframe {{ sanitizedSpecName }}SoundTrack{{ channel.id }}Keyframes[] =
{
	{% for keyframe in keyframes -%}
	{{'{'}}{{ keyframe.duration * tickDurationScalingFactor }}, {{ keyframe.flags | join(' | ') }}{{'},'}}
	{% endfor -%}
	{0, kSoundTrackEventEnd}, 
};

SoundTrackROMSpec {{ sanitizedSpecName }}SoundTrack{{ channel.id }} =
{
	// kTrackNative, kTrackPCM
	kTrackNative,

	// Skip if no sound source available?
	{{ channel.allowSkip }},

	// Total number of samples (0 if not PCM)
	0,

	// Keyframes that define the track
	(SoundTrackKeyframe*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}Keyframes,

	// SxINT values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxINT,

	// SxLRV values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxLRV,

	// SxFQH and SxFQL values
	(uint16*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxFQ,

	// SxEV0 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxEV0,

	// SxEV1 values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxEV1,

	// SxRAM pointers
	(int8**){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxRAM,

	// SxSWP values
	(uint8*){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxSWP,

	// SxMOD pointers
	(int8**){{ sanitizedSpecName }}SoundTrack{{ channel.id }}SxMOD,
};
{%- endif %}
{%- endfor %}

{{ macros.sectionHeader('Definitions') }}

SoundTrackROMSpec* const {{ sanitizedSpecName }}SoundTracks[] =
{
	{%- for channel in item.channels %}
	{%- if channel.sequence | length %}
	&{{ sanitizedSpecName }}SoundTrack{{ channel.id }},
	{%- endif %}
	{%- endfor %}
	NULL
};

SoundROMSpec {{ sanitizedSpecName }}SoundSpec =
{
	// Name
	"{{ item.name }}",

	// Play in loop
	{{ item.loop }},

	// Tick duration in US
	{{ item.speed * 1000 / tickDurationScalingFactor }},

	// Tracks
	(SoundTrackSpec**){{ sanitizedSpecName }}SoundTracks,
};
