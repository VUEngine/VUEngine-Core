{%- set sanitizedSpecName = itemUri | basename(false) | sanitizeSpecName -%}
{%- set soundData = itemUri | convertPcm(item.sourceFile, item.range) -%}

{%- import 'templates/partials/macros.njk' as macros -%}
{% include('templates/partials/fileHeader/fileHeader.c.njk') %}

{{ macros.sectionHeader('Includes') }}

#include <Sound.h>
#include <WaveForms.h>

{{ macros.sectionHeader('Declarations') }}

#define {{ sanitizedSpecName }}SoundTrackLength {{ soundData | length }}

{{ macros.sectionHeader('Definitions') }}

const uint8 {{ sanitizedSpecName }}SoundTrack1SxINT[] =
{
	0x9F,
};

const uint8 {{ sanitizedSpecName }}SoundTrack1SxLRV[] 
{%- if item.section == 'data' %} __attribute((section(".rodata"))){% endif %}
{%- if item.section == 'exp' %} __attribute((section(".expdata"))){% endif %} =
{
#ifndef REDUCE_PCM_DATA
	{% for soundDataValue in soundData -%}
	{{  soundDataValue | intToHex(2) }},
	{%- if loop.index % 16 == 0 and not loop.last %}{{ "\n	" }}{% endif -%}
	{%- endfor %}
#endif
};

const uint16 {{ sanitizedSpecName }}SoundTrack1SxFQ[] =
{
	0x00
};

const uint8 {{ sanitizedSpecName }}SoundTrack1SxEV0[] =
{
	0xF0,
};

const uint8 {{ sanitizedSpecName }}SoundTrack1SxEV1[] =
{
	0x00,
};

const int8* const {{ sanitizedSpecName }}SoundTrack1SxRAM[] =
{
	PCMWaveForm,
};

const uint8 {{ sanitizedSpecName }}SoundTrack1SxSWP[] =
{
	0x00,
};

const int8* const {{ sanitizedSpecName }}SoundTrack1SxMOD[] =
{
	NULL,
};

const SoundTrackKeyframe {{ sanitizedSpecName }}SoundTrack1Keyframes[] =
{
	{0, kSoundTrackEventStart},
	{0, kSoundTrackEventEnd},
};

SoundTrackROMSpec {{ sanitizedSpecName }}SoundTrack =
{
	// kTrackNative, kTrackPCM
	kTrackPCM,

	// Skip if no sound source available?
	false,

	// Total number of samples (0 if not PCM)
	{{ sanitizedSpecName }}SoundTrackLength,

	// Keyframes that define the track
	(SoundTrackKeyframe*){{ sanitizedSpecName }}SoundTrack1Keyframes,

	// SxINT values
	(uint8*){{ sanitizedSpecName }}SoundTrack1SxINT,

	// SxLRV values
	(uint8*){{ sanitizedSpecName }}SoundTrack1SxLRV,

	// SxFQH and SxFQL values
	(uint16*){{ sanitizedSpecName }}SoundTrack1SxFQ,

	// SxEV0 values
	(uint8*){{ sanitizedSpecName }}SoundTrack1SxEV0,

	// SxEV1 values
	(uint8*){{ sanitizedSpecName }}SoundTrack1SxEV1,

	// SxRAM pointers
	(int8**){{ sanitizedSpecName }}SoundTrack1SxRAM,

	// SxSWP values
	(uint8*){{ sanitizedSpecName }}SoundTrack1SxSWP,

	// SxMOD pointers
	(int8**){{ sanitizedSpecName }}SoundTrack1SxMOD,
};

SoundTrackROMSpec* const {{ sanitizedSpecName }}SoundTracks[] =
{
	&{{ sanitizedSpecName }}SoundTrack,
	NULL
};

SoundROMSpec {{ sanitizedSpecName }}SoundSpec =
{
	// Name
	"{{ sanitizedSpecName }}",

	// Play in loop
	{{ item.loop }},

	// Tick duration in US
	100,

	// Tracks
	(SoundTrackSpec**){{ sanitizedSpecName }}SoundTracks
};
