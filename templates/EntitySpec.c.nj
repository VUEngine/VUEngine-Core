{%- import 'templates/partials/macros.nj' as macros -%}
{% include('templates/partials/fileHeader/fileHeader.c.nj') %}
{%- set sanitizedSpecName = item.name | sanitizeSpecName -%}

{%- set includes = [] -%}
{%- for sprite in item.sprites -%}
	{%- set includes = (includes.push(sprite.class), includes) -%}
{%- endfor %}
{%- if item.collisions.inGameType != 'None' -%}
	{%- set includes = (includes.push('InGameTypes'), includes) -%}
{%- endif %}
{%- if item.physics.enabled -%}
	{%- set includes = (includes.push('Body'), includes) -%}
{%- endif %}


{{ macros.sectionHeader('Includes') }}

{% for include in includes | unique -%}
#include <{{ include }}.h>
{% endfor %}

{{ macros.sectionHeader('Image Data') }}

{% set files = [] -%}
{%- for sprite in item.sprites.sprites -%}
{%- for file in sprite.texture.files -%}
	{%- set files = (files.push(file), files) -%}
{%- endfor -%}
{%- endfor -%}
{%- set files = files | unique %}

{%- set tilesName = sanitizedSpecName ~ 'Image' -%}
{%- set section = 'rom' -%}
{%- set compression = 'none' -%}
{%- set imageData = itemUri | convertImage({
    "animation": {
        "frames": 0,
        "individualFiles": false,
        "isAnimation": false
    },
    "files": files,
    "map": {
        "compression": compression,
        "generate": true,
        "reduce": {
            "flipped": true,
            "unique": true
        }
    },
    "name": tilesName,
    "section": section,
    "tileset": {
        "compression": compression,
        "shared": true
    }
}) -%}

{%- include('templates/partials/image/tiles.c.nj') -%}
{%- include('templates/partials/image/maps.c.nj') -%}
{%- include('templates/partials/image/frameOffsets.c.nj') -%}

{%- if item.animations.definitions.length -%}
{{ macros.sectionHeader('Animations') }}

{% for animation in item.animations.animations -%}
AnimationFunctionROMSpec {{ sanitizedSpecName }}{{ animation.name | toUpperSnakeCase }}Animation =
{
	// number of frames of this animation function
	{{ animation.frames.length }},

	// frames to play in animation
	{
		{{ animation.frames }}
	},

	// number of cycles a frame of animation is displayed
	{{ animation.cycles }},

	// whether to play it in loop or not
	{{ animation.loop }},

	// method to call on function completion
	{% if animation.callback %}(EventListener){{ animation.callback }}{% else %}NULL{% endif %},

	// function's name
	"{{ animation.name | sanitizeSpecName }}",
};

{% endfor -%}

AnimationFunctionROMSpec* const {{ sanitizedSpecName }}Animations =
{
	{% for animation in item.animations.definitions -%}
		(AnimationFunction*){{ sanitizedSpecName }}{{ animation.name | toUpperSnakeCase }}Animation,
	{% endfor -%}
	NULL
};
{% endif %}

{% if item.sprites.sprites.length -%}
{{ macros.sectionHeader('Sprites') }}

CharSetROMSpec {{ sanitizedSpecName }}CharsetSpec =
{
	// number of chars in function of the number of frames to load at the same time
	{{ imageData.tiles.count }},

	// whether it is shared or not
	{{ sprite.texture.charset.shared }},

	// whether the tiles are optimized or not
	{{ sprite.texture.charset.optimized }},

	// char spec
	{{ tilesName }}Tiles,

	// pointer to the frames offsets
	{%- if imageData.tiles.frameOffsets is defined and imageData.tiles.frameOffsets.length %}
	{{ tileName }}TilesFrameOffsets,
	{%- else %}
	NULL,
	{%- endif %}
};

{% set spriteNames = [] -%}
{%- for sprite in item.sprites.sprites -%}

{%- set spriteName = sanitizedSpecName ~ 'Sprite' ~ loop.index -%}
{%- set spriteNames = (spriteNames.push(spriteName), spriteNames) -%}

TextureROMSpec {{ spriteName }}TextureSpec =
{
	// charset spec
	(CharSetSpec*)&{{ sanitizedSpecName }}CharsetSpec,

	// bgmap spec
	{{ sanitizedSpecName ~ 'Image' ~ loop.index }}Map,

	// cols (max 64)
	{{ sprite.texture.size.x }},

	// rows (max 64)
	{{ sprite.texture.size.y }},

	// padding for affine/hbias transformations
	{ {{ sprite.texture.padding.x }}, {{ sprite.texture.padding.y }} },

	// number of frames
	1,

	// palette number (0-3)
	{{ sprite.texture.palette }},

	// recyclable
	{{ sprite.texture.recycleable }},

	// vertical flip
	{{ sprite.texture.flip.vertical }},

	// horizontal flip
	{{ sprite.texture.flip.horizontal }},
};

{{ sprite.class }}ROMSpec {{ spriteName }}SpriteSpec =
{
	{
		// sprite's type
		__TYPE({{ sprite.class }}),

		// texture spec
		(TextureSpec*)&{{ sanitizedSpecName }}TextureSpec,

		// transparency (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)
		__TRANSPARENCY_{{ sprite.transparency | upper }},

		// displacement
		{ {{ sprite.displacement.x }}, {{ sprite.displacement.y }}, {{ sprite.displacement.z }}, {{ sprite.displacement.parallax }} },
	},

	// bgmap mode (__WORLD_BGMAP, __WORLD_AFFINE, __WORLD_OBJECT or __WORLD_HBIAS)
	// make sure to use the proper corresponding sprite type throughout the spec (BgmapSprite or ObjectSprite)
	__WORLD_{{ sprite.bgmapMode | upper }},

	{% if sprite.bgmapMode !== 'OBJECT' -%}
	// pointer to affine/hbias manipulation function
	{% if sprite.manipulationFunction %}(ParamTableEffectMethod){{ sprite.manipulationFunction }}{% else %}NULL{% endif %},
	{%- endif %}

	// display mode (__WORLD_ON, __WORLD_LON or __WORLD_RON)
	__WORLD_{{ sprite.displayMode }},
};

{% endfor -%}

BgmapSpriteROMSpec* const {{ sanitizedSpecName }}SpriteSpecs[] =
{
	{% for spriteName in spriteNames -%}
	&{{ spriteName }}SpriteSpec,
	{% endfor -%}
	NULL
};
{%- endif %}


{{ macros.sectionHeader('Entity') }}

{% if item.physics.enabled -%}
PhysicalPropertiesROMSpec {{ sanitizedSpecName }}PhysicalPropertiesSpec =
{
	// mass
	__F_TO_FIX10_6({{ item.physics.mass }}f),

	// friction
	__F_TO_FIX10_6({{ item.physics.friction }}f),

	// bounciness
	__F_TO_FIX10_6({{ item.physics.bounciness }}f),

	// maximum velocity
	{
		__I_TO_FIXED({{ item.physics.maximumVelocity.x }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.y }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.z }}),
	},

	// maximum speed
	__I_TO_FIXED({{ item.physics.maximumSpeed }})
};

{% endif -%}

EntityROMSpec {{ sanitizedSpecName }}EntitySpec =
{
	// class allocator
	__TYPE(Entity),

	// children
	NULL,

	// behaviors
	NULL,

	// extra
	NULL,

	// sprites
	(SpriteSpec**){{ sanitizedSpecName }}SpriteSpecs,

	// use z displacement in projection
	false,

	// meshes
	(WireframeSpec**)NULL,

	// collision shapes
	(ColliderSpec*)NULL,

	// size
	// if 0, width and height will be inferred from the first sprite's texture's size
	{
		{{ item.pixelSize.x }}, // x
		{{ item.pixelSize.y }}, // y
		{{ item.pixelSize.z }}, // z
	},

	// gameworld's character's type
	kType{{ item.collisions.inGameType | sanitizeSpecName }},

	// physical specification
	(PhysicalProperties*){%- if item.physics.enabled -%} 
			&{{ sanitizedSpecName }}PhysicalPropertiesSpec 
		{%- else -%} 
			NULL
		{%- endif -%},
};
