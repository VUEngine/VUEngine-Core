{%- import 'templates/partials/macros.nj' as macros -%}
{% include('templates/partials/fileHeader.c.nj') %}
{%- set sanitizedSpecName = item.name | sanitizeSpecName -%}

{%- set includes = [] -%}
{%- for sprite in item.sprites -%}
	{%- set includes = (includes.push(sprite.type), includes) -%}
{%- endfor %}
{%- if item.collisions.inGameType != 'None' -%}
	{%- set includes = (includes.push('InGameTypes'), includes) -%}
{%- endif %}
{%- if item.physics.enabled -%}
	{%- set includes = (includes.push('Body'), includes) -%}
{%- endif %}


{{ macros.sectionHeader('Includes') }}

{% for include in includes | unique -%}
#include <{{ include }}.h>
{% endfor %}

{{ macros.sectionHeader('Declarations') }}

{% for sprite in item.sprites -%}
extern uint32 {{ sprite.texture.image.name | sanitizeSpecName }}Tiles[];
extern uint16 {{ sprite.texture.image.name | sanitizeSpecName }}Map[];
{% endfor %}

{% if item.animations.definitions.length -%}
{{ macros.sectionHeader('Animations') }}

{% for animation in item.animations.animations -%}
AnimationFunctionROMSpec {{ sanitizedSpecName }}{{ animation.name | toUpperSnakeCase }}Animation =
{
	// number of frames of this animation function
	{{ animation.frames.length }},

	// frames to play in animation
	{
		{{ animation.frames }}
	},

	// number of cycles a frame of animation is displayed
	{{ animation.cycles }},

	// whether to play it in loop or not
	{{ animation.loop }},

	// method to call on function completion
	{% if animation.callback %}(EventListener){{ animation.callback }}{% else %}NULL{% endif %},

	// function's name
	"{{ animation.name | sanitizeSpecName }}",
};

{% endfor -%}

AnimationFunctionROMSpec* const {{ sanitizedSpecName }}Animations =
{
	{% for animation in item.animations.definitions -%}
		(AnimationFunction*){{ sanitizedSpecName }}{{ animation.name | toUpperSnakeCase }}Animation,
	{% endfor -%}
	NULL
};
{% endif %}

{% if item.sprites.length -%}
{{ macros.sectionHeader('Sprites') }}

{% set spriteNames = [] -%}
{%- for sprite in item.sprites -%}

{%- if sprite.name -%}
	{%- set spriteName = item.name ~ sprite.name -%}
{%- elseif item.sprites.length > 1-%}
	{%- set spriteName = item.name ~ loop.index -%}
{%- else -%}
	{%- set spriteName = item.name -%}
{%- endif -%}
{%- set spriteName = spriteName | toUpperSnakeCase -%}
{%- set spriteNames = (spriteNames.push(spriteName), spriteNames) -%}

CharSetROMSpec {{ spriteName }}Charset =
{
	// number of chars in function of the number of frames to load at the same time

	{% if sprite.texture.charset.type == 'animatedMulti' or sprite.texture.charset.type == 'notAnimated' -%}
	{{ sprite.texture.image.chars }},
	{%- else -%}
	{{ sprite.texture.size.x * sprite.texture.size.y }},
	{%- endif %}

	// whether it is shared or not
	__{{ sprite.texture.charset.shared}},

	// whether the tiles are optimized or not
	__{{ sprite.texture.charset.optimized}},

	// char spec
	{{ sprite.texture.image.name | sanitizeSpecName }}Tiles,

	// pointer to the frames offsets
	NULL,
};

TextureROMSpec {{ spriteName }}Texture =
{
	// charset spec
	(CharSetSpec*)&{{ spriteName }}Charset,

	// bgmap spec
	{{ sprite.texture.image.name | sanitizeSpecName }}Map,

	// cols (max 64)
	{{ sprite.texture.size.x }},

	// rows (max 64)
	{{ sprite.texture.size.y }},

	// padding for affine/hbias transformations
	{
		{{ sprite.texture.padding.x }}, // cols
		{{ sprite.texture.padding.y }}, // rows
	},

	// number of frames
	{% if sprite.texture.charset.type == 'animatedMulti' and item.animations.definitions.length -%}
	{{ item.animations.definitions.length }}
	{%- else -%}
	1,
	{%- endif %}

	// palette number (0-3)
	{{ sprite.texture.palette }},

	// recyclable
	{{ sprite.texture.recyclable }},

	// vertical flip
	false,

	// horizontal flip
	false,
};

{{ sprite.type | replace('Animated', '') }}ROMSpec {{ spriteName }}SpriteSpec =
{
	{
		// sprite's type
		__TYPE({{ sprite.type }}),

		// texture spec
		(TextureSpec*)&{{ sanitizedSpecName }}Texture,

		// transparency (__TRANSPARENCY_NONE, __TRANSPARENCY_EVEN or __TRANSPARENCY_ODD)
		__TRANSPARENCY_{{ sprite.transparency }},

		// displacement
		{
			{{ sprite.displacement.x }}, // x
			{{ sprite.displacement.y }}, // y
			{{ sprite.displacement.z }}, // z
			{{ sprite.displacement.parallax }}, // parallax
		},
	},

	// bgmap mode (__WORLD_BGMAP, __WORLD_AFFINE, __WORLD_OBJECT or __WORLD_HBIAS)
	// make sure to use the proper corresponding sprite type throughout the spec (BgmapSprite or ObjectSprite)
	__WORLD_{{ sprite.bgmapMode }},

	{% if sprite.bgmapMode !== 'OBJECT' -%}
	// pointer to affine/hbias manipulation function
	{% if sprite.manipulationFunction %}(ParamTableEffectMethod){{ sprite.manipulationFunction }}{% else %}NULL{% endif %},
	{%- endif %}

	// display mode (__WORLD_ON, __WORLD_LON or __WORLD_RON)
	__WORLD_{{ sprite.displayMode }},
};

{% endfor -%}

BgmapSpriteROMSpec* const {{ sanitizedSpecName }}SpriteSpecs[] =
{
	{% for spriteName in spriteNames -%}
	&{{ spriteName }}SpriteSpec,
	{% endfor -%}
	NULL
};
{%- endif %}


{{ macros.sectionHeader('Entity') }}

{% if item.physics.enabled -%}
PhysicalPropertiesROMSpec {{ sanitizedSpecName }}PhysicalPropertiesSpec =
{
	// mass
	__F_TO_FIX10_6({{ item.physics.mass }}f),

	// friction
	__F_TO_FIX10_6({{ item.physics.friction }}f),

	// bounciness
	__F_TO_FIX10_6({{ item.physics.bounciness }}f),

	// maximum velocity
	{
		__I_TO_FIXED({{ item.physics.maximumVelocity.x }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.y }}), 
		__I_TO_FIXED({{ item.physics.maximumVelocity.z }}),
	},

	// maximum speed
	__I_TO_FIXED({{ item.physics.maximumSpeed }})
};

{% endif -%}

EntityROMSpec {{ sanitizedSpecName }}EntitySpec =
{
	// class allocator
	__TYPE(Entity),

	// children
	NULL,

	// behaviors
	NULL,

	// extra
	NULL,

	// sprites
	(SpriteSpec**){{ sanitizedSpecName }}SpriteSpecs,

	// use z displacement in projection
	false,

	// meshes
	(WireframeSpec**)NULL,

	// collision shapes
	(ColliderSpec*)NULL,

	// size
	// if 0, width and height will be inferred from the first sprite's texture's size
	{
		{{ item.pixelSize.x }}, // x
		{{ item.pixelSize.y }}, // y
		{{ item.pixelSize.z }}, // z
	},

	// gameworld's character's type
	kType{{ item.collisions.inGameType | sanitizeSpecName }},

	// physical specification
	(PhysicalProperties*){%- if item.physics.enabled -%} 
			&{{ sanitizedSpecName }}PhysicalPropertiesSpec 
		{%- else -%} 
			NULL
		{%- endif -%},
};
