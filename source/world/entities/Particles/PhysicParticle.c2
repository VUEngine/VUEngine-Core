/* VBJaEngine: bitmap graphics engine for the Nintendo Virtual Boy
 *
 * Copyright (C) 2007 Jorge Eremiev
 * jorgech3@gmail.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
 */

//---------------------------------------------------------------------------------------------------------
// 												INCLUDES
//---------------------------------------------------------------------------------------------------------

#include <Particle.h>
#include <Prototypes.h>
#include <Optics.h>
#include <Shape.h>
#include <CollisionManager.h>


//---------------------------------------------------------------------------------------------------------
// 											CLASS'S DEFINITION
//---------------------------------------------------------------------------------------------------------

// define the Particle
__CLASS_DEFINITION(Particle, SpatialObject);


//---------------------------------------------------------------------------------------------------------
// 												PROTOTYPES
//---------------------------------------------------------------------------------------------------------

// global
extern const VBVec3D* _screenPosition;
const extern VBVec3D* _screenDisplacement;
extern const Optical* _optical;

static void Particle_addSprite(Particle this, const SpriteDefinition* spriteDefinition);
static void Particle_translateSprites(Particle this, bool updateSpriteScale, bool updateSpritePosition);


//---------------------------------------------------------------------------------------------------------
// 												CLASS'S METHODS
//---------------------------------------------------------------------------------------------------------

// class's constructor
void Particle_constructor(Particle this, const ParticleDefinition particleDefinition, const SpriteDefinition* spriteDefinition)
{
	ASSERT(this, "Particle::constructor: null this");

	// construct base Container
	__CONSTRUCT_BASE();

	this->shape = NULL;
	
	Particle_addSprite(this, spriteDefinition);
	
	this->position.x = 0;
	this->position.y = 0;
	this->position.z = 0;
	
	this->previousGlobalPosition.x = 0;
	this->previousGlobalPosition.y = 0;
	this->previousGlobalPosition.z = 0;
}

// class's destructor
void Particle_destructor(Particle this)
{
	ASSERT(this, "Particle::destructor: null this");

	// better to do it here than forget in other classes
	// unregister the shape for collision detection
	CollisionManager_unregisterShape(CollisionManager_getInstance(), this->shape);

	this->shape = NULL;
	this->objectSprite = NULL;
	
	Particle_releaseSprites(this);

	// destroy the super Container
	__DESTROY_BASE;
}

// add sprite
static void Particle_addSprite(Particle this, const SpriteDefinition* spriteDefinition)
{
	ASSERT(this, "Particle::addSprite: null this");

	Sprite sprite = NULL;

	ASSERT(spriteDefinition->allocator, "Particle::load: no sprite allocator defined");

	if (spriteDefinition->allocator)
	{
		// call the appropiate allocator to support inheritance!
		this->objectSprite = __UPCAST(ObjectSprite, ((Sprite (*)(SpriteDefinition*, ...)) spriteDefinition->allocator)((SpriteDefinition*)spriteDefinition, this));
	}

	ASSERT(this->objectSprite, "Particle::addSprite: sprite not created");
}

// transform sprites
static void Particle_translateSprites(Particle this, bool updateSpriteScale, bool updateSpritePosition)
{
	ASSERT(this, "Particle::transform: null this");
	ASSERT(this->objectSprite, "Particle::transform: null objectSprite");

	// calculate the scale
	__VIRTUAL_CALL(void, Sprite, resize, this->objectSprite, this->position.z);

	// calculate sprite's parallax
	__VIRTUAL_CALL(void, Sprite, calculateParallax, this->objectSprite, this->position.z);
	
	// update sprite's 2D position
	__VIRTUAL_CALL(void, Sprite, synchronizePosition, this->objectSprite, this->position);
}

// draw class
void Particle_initialTransform(Particle this, Transformation* environmentTransform)
{
	ASSERT(this, "InGameParticle::transform: null this");

	// force sprite translation
	Particle_transform(this, environmentTransform);
}

// transform class
void Particle_transform(Particle this, Transformation* environmentTransform)
{
	ASSERT(this, "Particle::transform: null this");

		// update graphical representation
		Particle_translateSprites(this, updateSpriteScale, updateSpritePosition);
	}
}

// retrieve position
VBVec3D Particle_getPosition(Particle this)
{
	ASSERT(this, "Particle::getPosition: null this");

	return this->position;
}

// get width
u16 Particle_getWidth(Particle this)
{
	ASSERT(this, "Particle::getWidth: null this");

	if (!this->size.x)
	{
		Particle_calculateSize(this);
	}

	// must calculate based on the scale because not affine Container must be enlarged
	return this->size.x;
}

// get height
u16 Particle_getHeight(Particle this)
{
	ASSERT(this, "Particle::getHeight: null this");

	if (!this->size.y)
	{
		Particle_calculateSize(this);
	}
	
	return this->size.y;
}

// get deep
u16 Particle_getDeep(Particle this)
{
	ASSERT(this, "Particle::getDeep: null this");

	if (!this->size.z)
	{
		Particle_calculateSize(this);
	}

	// must calculate based on the scale because not affine object must be enlarged
	return this->size.z;
}

// retrieve previous position
const VBVec3D* Particle_getPreviousPosition(Particle this)
{
	ASSERT(this, "Particle::getPreviousPosition: null this");

	return &this->previousPosition;
}


// retrieve shape
Shape Particle_getShape(Particle this)
{
	ASSERT(this, "Particle::getShape: null this");

	return this->shape;
}

// make it visible
void Particle_show(Particle this)
{
	ASSERT(this, "Particle::show: null this");

}

// make it invisible
void Particle_hide(Particle this)
{
	ASSERT(this, "Particle::hide: null this");
}

// defaults to true
bool Particle_canMoveOverAxis(Particle this, const Acceleration* acceleration)
{
	return true;
}